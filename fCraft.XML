<?xml version="1.0"?>
<doc>
    <assembly>
        <name>fCraft</name>
    </assembly>
    <members>
        <member name="T:fCraft.Drawing.IBrushFactory">
            <summary> Class that desribes a type of brush in general, and allows creating new brushes with /Brush.
            One instance of IBrushFactory for each type of brush is kept by the BrushManager. </summary>
        </member>
        <member name="M:fCraft.Drawing.IBrushFactory.MakeBrush(fCraft.Player,fCraft.Command)">
            <summary> Creates a new brush for a player, based on given parameters. </summary>
            <param name="player"> Player who will be using this brush.
            Errors and warnings about the brush creation should be communicated by messaging the player. </param>
            <param name="cmd"> Parameters passed to the /Brush command (after the brush name). </param>
            <returns> A newly-made brush, or null if there was some problem with parameters/permissions. </returns>
        </member>
        <member name="P:fCraft.Drawing.IBrushFactory.Aliases">
            <summary> List of aliases/alternate names for this brush. May be null. </summary>
        </member>
        <member name="T:fCraft.Drawing.IBrush">
            <summary> Class that describes a configured brush, and allows creating instances for specific DrawOperations.
            Configuration-free brush types may combine IBrushFactory and IBrushType into one class. </summary>
        </member>
        <member name="M:fCraft.Drawing.IBrush.MakeInstance(fCraft.Player,fCraft.Command,fCraft.Drawing.DrawOperation)">
            <summary> Creates an instance for this configured brush, for use with a specific DrawOperation. </summary>
            <param name="player"> Player who will be using this brush.
            Errors and warnings about the brush creation should be communicated by messaging the player. </param>
            <param name="cmd"> Parameters passed to the DrawOperation.
            If any are given, these parameters should generally replace any stored configuration. </param>
            <param name="op"> DrawOperation that will be using this brush. </param>
            <returns> A newly-made brush, or null if there was some problem with parameters/permissions. </returns>
        </member>
        <member name="P:fCraft.Drawing.IBrush.Factory">
            <summary> IBrushFactory associated with this brush type. </summary>
        </member>
        <member name="P:fCraft.Drawing.IBrush.Description">
            <summary> A compact readable summary of brush type and configuration. </summary>
        </member>
        <member name="T:fCraft.Drawing.IBrushInstance">
            <summary> Class that describes an individual instance of a configured brush.
            Each brush instance will only be used for one DrawOperation, so it can store state.
            Stateless brush types may combine IBrush and IBrushInstance into one class. </summary>
        </member>
        <member name="M:fCraft.Drawing.IBrushInstance.Begin(fCraft.Player,fCraft.Drawing.DrawOperation)">
            <summary> Called when the DrawOperation starts. Should be used to verify that the brush is ready for use.
            Resources used by the brush should be obtained here. </summary>
            <param name="player"> Player who started the DrawOperation. </param>
            <param name="op"> DrawOperation that will be using this brush. </param>
            <returns> Whether this brush instance has successfully began or not. </returns>
        </member>
        <member name="M:fCraft.Drawing.IBrushInstance.NextBlock(fCraft.Drawing.DrawOperation)">
            <summary> Provides the next Block type for the given DrawOperation. </summary>
            <returns> Block type to place, or Block.Undefined to skip. </returns>
        </member>
        <member name="M:fCraft.Drawing.IBrushInstance.End">
            <summary> Called when the DrawOperation is done or cancelled.
            Resources used by the brush should be freed/disposed here. </summary>
        </member>
        <member name="P:fCraft.Drawing.IBrushInstance.Brush">
            <summary> Configured brush that created this instance. </summary>
        </member>
        <member name="P:fCraft.Drawing.IBrushInstance.InstanceDescription">
            <summary> A compact readable summary of brush type, configuration, and state. </summary>
        </member>
        <member name="P:fCraft.Drawing.IBrushInstance.HasAlternateBlock">
            <summary> Whether the brush is capable of providing alternate blocks (e.g. for filling hollow DrawOps).</summary>
        </member>
        <member name="T:fCraft.Drawing.DrawOperation">
            <summary> Abstract class representing a drawing operation. </summary>
        </member>
        <member name="F:fCraft.Drawing.DrawOperation.Player">
            <summary> Player who is executing this command.
            Used for both permission checks and messaging. </summary>
        </member>
        <member name="F:fCraft.Drawing.DrawOperation.Map">
            <summary> Map to draw blocks to. </summary>
        </member>
        <member name="F:fCraft.Drawing.DrawOperation.UndoState">
            <summary> Undo state associated with this operation. Created by DrawOperation.Begin(). </summary>
        </member>
        <member name="F:fCraft.Drawing.DrawOperation.Coords">
            <summary> Coordinates that are currently being processed. </summary>
        </member>
        <member name="P:fCraft.Drawing.DrawOperation.ExpectedMarks">
            <summary> Expected number of marks to pass to DrawOperation.Prepare() </summary>
        </member>
        <member name="P:fCraft.Drawing.DrawOperation.Brush">
            <summary> Brush used to determine which blocks to place.
            Must be assigned before DrawOperation.Prepare() is called. </summary>
        </member>
        <member name="P:fCraft.Drawing.DrawOperation.Context">
            <summary> Block change context, to be reported to BlockDB and Player.PlacingBlock/PlacedBlock events. 
            Should include BlockChangeContext.Drawn flag. </summary>
        </member>
        <member name="P:fCraft.Drawing.DrawOperation.Marks">
            <summary> Marks given by the player to this command. Marks could come from either clicks or /Mark command.
            Set by DrawOperation.Prepare() </summary>
        </member>
        <member name="P:fCraft.Drawing.DrawOperation.StartTime">
            <summary> Time when the draw operatation began. Set by DrawOperation.Begin() </summary>
        </member>
        <member name="P:fCraft.Drawing.DrawOperation.Bounds">
            <summary> Area that bounds the DrawOperation's extent, if possible to estimate in advance.
            Used for logging. Should be assigned, as accurately as possible, before DrawOp finishes. </summary>
        </member>
        <member name="P:fCraft.Drawing.DrawOperation.HasBegun">
            <summary> Whether this operation has been started (queued for processing on the Map). </summary>
        </member>
        <member name="P:fCraft.Drawing.DrawOperation.IsDone">
            <summary> Whether this operation is done (has finished or had been cancelled). </summary>
        </member>
        <member name="P:fCraft.Drawing.DrawOperation.IsCancelled">
            <summary> Whether this operation has been cancelled (e.g. by /Undo or /WLock). </summary>
        </member>
        <member name="P:fCraft.Drawing.DrawOperation.BlocksProcessed">
            <summary> Number of blocks/coordinates that were considered for drawing. </summary>
        </member>
        <member name="P:fCraft.Drawing.DrawOperation.BlocksUpdated">
            <summary> Number of blocks/coordinates that ended up being changed/updated. </summary>
        </member>
        <member name="P:fCraft.Drawing.DrawOperation.BlocksDenied">
            <summary> Number of blocks/coordinates that were supposed to be changed/updated,
            but were left untouched due to permission issues. </summary>
        </member>
        <member name="P:fCraft.Drawing.DrawOperation.BlocksSkipped">
            <summary> Number of blocks/coordinates that were processed, and left untouched: either because the Brush decided to skip it,
            or because map's current block matched the desired blocktype. </summary>
        </member>
        <member name="P:fCraft.Drawing.DrawOperation.BlocksTotalEstimate">
            <summary> Estimate of total number of blocks that will be processed by this command.
            Should be as accurate as reasonably possible by DrawOperation.Prepare().
            Used for volume permission checks. Must not be negative. </summary>
        </member>
        <member name="P:fCraft.Drawing.DrawOperation.BlocksLeftToProcess">
            <summary> Estimated total blocks left to process. </summary>
        </member>
        <member name="P:fCraft.Drawing.DrawOperation.PercentDone">
            <summary> Approximate completion percentage of this command. </summary>
        </member>
        <member name="P:fCraft.Drawing.DrawOperation.UseAlternateBlock">
            <summary> Whether the brush should use alternate block (if available)
            for filling insides of hollow DrawOps. Currently only usable with NormalBrush. </summary>
        </member>
        <member name="P:fCraft.Drawing.DrawOperation.Name">
            <summary> General name of this type of draw operation. Should be same for all instances. </summary>
        </member>
        <member name="P:fCraft.Drawing.DrawOperation.Description">
            <summary> Compact description of this specific draw operation,
            with any instance-specific parameters,
            and the brush's instance description. </summary>
        </member>
        <member name="P:fCraft.Drawing.DrawOperation.AnnounceCompletion">
            <summary> Whether completion or cancellation of this DrawOperation should be announced to Player. </summary>
        </member>
        <member name="P:fCraft.Drawing.DrawOperation.LogCompletion">
            <summary> Whether completion or cancellation of this DrawOperation should be logged. </summary>
        </member>
        <member name="T:fCraft.Updater">
            <summary> Checks for updates, and keeps track of current version/revision. </summary>
        </member>
        <member name="E:fCraft.Updater.CheckingForUpdates">
            <summary> Occurs when fCraft is about to check for updates (cancellable).
            The update Url may be overridden. </summary>
        </member>
        <member name="E:fCraft.Updater.CheckedForUpdates">
            <summary> Occurs when fCraft has just checked for updates. </summary>
        </member>
        <member name="T:fCraft.UpdaterMode">
            <summary> Updater behavior. </summary>
        </member>
        <member name="F:fCraft.UpdaterMode.Disabled">
            <summary> Does not check for updates. </summary>
        </member>
        <member name="F:fCraft.UpdaterMode.Notify">
            <summary> Checks for updates and notifies of availability (in console/log). </summary>
        </member>
        <member name="F:fCraft.UpdaterMode.Prompt">
            <summary> Checks for updates, downloads them if available, and prompts to install.
            Behavior is frontend-specific: in ServerGUI, a dialog is shown with the list of changes and
            options to update immediately or next time. In ServerCLI, asks to type in 'y' to confirm updating
            or press any other key to skip. '''Note: Requires user interaction
            (if you restart the server remotely while unattended, it may get stuck on this dialog).''' </summary>
        </member>
        <member name="F:fCraft.UpdaterMode.Auto">
            <summary> Checks for updates, automatically downloads and installs the updates, and restarts the server. </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:fCraft.ReleaseFlags" -->
        <member name="F:fCraft.ReleaseFlags.APIChange">
            <summary> The API was notably changed in this release. </summary>
        </member>
        <member name="F:fCraft.ReleaseFlags.Bugfix">
            <summary> Bugs were fixed in this release. </summary>
        </member>
        <member name="F:fCraft.ReleaseFlags.ConfigFormatChange">
            <summary> Config.xml format was changed (and version was incremented) in this release. </summary>
        </member>
        <member name="F:fCraft.ReleaseFlags.Dev">
            <summary> This is a developer-only release, not to be used on live servers.
            Untested/undertested releases are often marked as such. </summary>
        </member>
        <member name="F:fCraft.ReleaseFlags.Feature">
            <summary> A notable new feature was added in this release. </summary>
        </member>
        <member name="F:fCraft.ReleaseFlags.MapFormatChange">
            <summary> The map format was changed in this release (rare). </summary>
        </member>
        <member name="F:fCraft.ReleaseFlags.PlayerDBFormatChange">
            <summary> The PlayerDB format was changed in this release. </summary>
        </member>
        <member name="F:fCraft.ReleaseFlags.Security">
            <summary> A security issue was addressed in this release. </summary>
        </member>
        <member name="F:fCraft.ReleaseFlags.Unstable">
            <summary> There are known or likely stability issues in this release. </summary>
        </member>
        <member name="F:fCraft.ReleaseFlags.Optimized">
            <summary> This release contains notable optimizations. </summary>
        </member>
        <member name="T:fCraft.ICancellableEvent">
            <summary> An EventArgs for an event that can be cancelled. </summary>
        </member>
        <member name="T:fCraft.IRC">
            <summary> IRC control class. </summary>
        </member>
        <member name="T:fCraft.IRC.IRCThread">
            <summary> Class represents an IRC connection/thread.
            There is an undocumented option (IRCThreads) to "load balance" the outgoing
            messages between multiple bots. If that's the case, several IRCThread objects
            are created. The bots grab messages from IRC.outputQueue whenever they are
            not on cooldown (a bit of an intentional race condition). </summary>
        </member>
        <member name="T:fCraft.IRCReplyCode">
            <summary> IRC protocol reply codes. </summary>
        </member>
        <member name="T:fCraft.IRCMessageType">
            <summary> IRC message types. </summary>
        </member>
        <member name="M:fCraft.MapConversion.IMapConverter.ClaimsName(System.String)">
            <summary> Returns true if the filename (or directory name) matches this format's expectations. </summary>
        </member>
        <member name="M:fCraft.MapConversion.IMapConverter.Claims(System.String)">
            <summary> Allows validating the map format while using minimal resources. </summary>
            <returns> Returns true if specified file/directory is valid for this format. </returns>
        </member>
        <member name="M:fCraft.MapConversion.IMapConverter.LoadHeader(System.String)">
            <summary> Attempts to load map dimensions from specified location. </summary>
            <returns> Map object on success, or null on failure. </returns>
        </member>
        <member name="M:fCraft.MapConversion.IMapConverter.Load(System.String)">
            <summary> Fully loads map from specified location. </summary>
            <returns> Map object on success, or null on failure. </returns>
        </member>
        <member name="M:fCraft.MapConversion.IMapConverter.Save(fCraft.Map,System.String)">
            <summary> Saves given map at the given location. </summary>
            <returns> true if saving succeeded. </returns>
        </member>
        <member name="P:fCraft.MapConversion.IMapConverter.ServerName">
            <summary> Returns name(s) of the server(s) that uses this format. </summary>
        </member>
        <member name="P:fCraft.MapConversion.IMapConverter.StorageType">
            <summary> Returns the map storage type (file-based or directory-based). </summary>
        </member>
        <member name="P:fCraft.MapConversion.IMapConverter.Format">
            <summary> Returns the format name. </summary>
        </member>
        <member name="T:fCraft.SelectionCallback">
            <summary> Callback for a player-made selection of one or more blocks on a map.
            A command may request a number of marks/blocks to select, and a specify callback
            to be executed when the desired number of marks/blocks is reached. </summary>
            <param name="player"> Player who made the selection. </param>
            <param name="marks"> An array of 3D marks/blocks, in terms of block coordinates. </param>
            <param name="tag"> An optional argument to pass to the callback,
            the value of player.selectionArgs </param>
        </member>
        <member name="T:fCraft.Player">
            <summary> Object representing volatile state ("session") of a connected player.
            For persistent state of a known player account, see PlayerInfo. </summary>
            <summary> Represents a connection to a Minecraft client. Handles low-level interactions (e.g. networking). </summary>
        </member>
        <member name="T:fCraft.IClassy">
            <summary> Provides a way for printing an object's name beautified with Minecraft color codes.
            It was "classy" in a sense that it was colored based on "class" (rank) of a player/world/zone. </summary>
        </member>
        <member name="F:fCraft.Player.Console">
            <summary> The godly pseudo-player for commands called from the server console.
            Console has all the permissions granted.
            Note that Player.Console.World is always null,
            and that prevents console from calling certain commands (like /TP). </summary>
        </member>
        <member name="F:fCraft.Player.AutoRank">
            <summary> The godly pseudo-player for commands called from the server console.
            Console has all the permissions granted.
            Note that Player.Console.World is always null,
            and that prevents console from calling certain commands (like /TP). </summary>
        </member>
        <member name="F:fCraft.Player.Position">
            <summary> Player's position in the current world. </summary>
        </member>
        <member name="M:fCraft.Player.IsIgnoring(fCraft.PlayerInfo)">
            <summary> Checks whether this player is currently ignoring a given PlayerInfo.</summary>
        </member>
        <member name="M:fCraft.Player.Ignore(fCraft.PlayerInfo)">
            <summary> Adds a given PlayerInfo to the ignore list.
            Not that ignores are not persistent, and are reset when a player disconnects. </summary>
            <param name="other"> Player to ignore. </param>
            <returns> True if the player is now ignored,
            false is the player has already been ignored previously. </returns>
        </member>
        <member name="M:fCraft.Player.Unignore(fCraft.PlayerInfo)">
            <summary> Removes a given PlayerInfo from the ignore list. </summary>
            <param name="other"> PlayerInfo to unignore. </param>
            <returns> True if the player is no longer ignored,
            false if the player was already not ignored. </returns>
        </member>
        <member name="M:fCraft.Player.Confirm(fCraft.Command,System.String,System.Object[])">
            <summary> Request player to confirm continuing with the command.
            Player is prompted to type "/ok", and when he/she does,
            the command is called again with IsConfirmed flag set. </summary>
            <param name="cmd"> Command that needs confirmation. </param>
            <param name="message"> Message to print before "Type /ok to continue". </param>
            <param name="args"> Optional String.Format() arguments, for the message. </param>
        </member>
        <member name="M:fCraft.Player.PlaceBlock(fCraft.Vector3I,fCraft.ClickAction,fCraft.Block)">
            <summary> Handles manually-placed/deleted blocks.
            Returns true if player's action should result in a kick. </summary>
        </member>
        <member name="M:fCraft.Player.RevertBlock(fCraft.Vector3I)">
            <summary>  Gets the block from given location in player's world,
            and sends it (async) to the player.
            Used to undo player's attempted block placement/deletion. </summary>
        </member>
        <member name="M:fCraft.Player.RevertBlockNow(fCraft.Vector3I)">
            <summary>  Gets the block from given location in player's world, and sends it (sync) to the player.
            Used to undo player's attempted block placement/deletion.
            To avoid threading issues, only use this from this player's IoThread. </summary>
        </member>
        <member name="M:fCraft.Player.Can(fCraft.Permission[])">
            <summary> Returns true if player has ALL of the given permissions. </summary>
        </member>
        <member name="M:fCraft.Player.CanAny(fCraft.Permission[])">
            <summary> Returns true if player has ANY of the given permissions. </summary>
        </member>
        <member name="M:fCraft.Player.Can(fCraft.Permission)">
            <summary> Returns true if player has the given permission. </summary>
        </member>
        <member name="M:fCraft.Player.Can(fCraft.Permission,fCraft.Rank)">
            <summary> Returns true if player has the given permission,
            and is allowed to affect players of the given rank. </summary>
        </member>
        <member name="M:fCraft.Player.CanDraw(System.Int32)">
            <summary> Returns true if player is allowed to run
            draw commands that affect a given number of blocks. </summary>
        </member>
        <member name="M:fCraft.Player.CanJoin(fCraft.World)">
            <summary> Returns true if player is allowed to join a given world. </summary>
        </member>
        <member name="M:fCraft.Player.CanPlace(fCraft.Map,fCraft.Vector3I,fCraft.Block,fCraft.BlockChangeContext)">
            <summary> Checks whether player is allowed to place a block on the current world at given coordinates.
            Raises the PlayerPlacingBlock event. </summary>
        </member>
        <member name="M:fCraft.Player.CanSee(fCraft.Player)">
            <summary> Whether this player can currently see another player as being online.
            Visibility is determined by whether the other player is hiding or spectating.
            Players can always see themselves. Super players (e.g. Console) can see all.
            Hidden players can only be seen by those of sufficient rank. </summary>
        </member>
        <member name="M:fCraft.Player.CanSeeMoving(fCraft.Player)">
            <summary> Whether this player can currently see another player moving.
            Behaves very similarly to CanSee method, except when spectating:
            Players can never see someone who's spectating them. If other player is spectating
            someone else, they are treated as hidden and can only be seen by those of sufficient rank. </summary>
        </member>
        <member name="M:fCraft.Player.CanSee(fCraft.World)">
            <summary> Whether this player should see a given world on the /Worlds list by default. </summary>
        </member>
        <member name="M:fCraft.Player.CheckPaidStatus(System.String)">
            <summary> Checks whether a given player has a paid minecraft.net account. </summary>
            <returns> True if the account is paid. False if it is not paid, or if information is unavailable. </returns>
        </member>
        <member name="M:fCraft.Player.IsValidName(System.String)">
            <summary> Ensures that a player name has the correct length and character set. </summary>
        </member>
        <member name="M:fCraft.Player.ContainsValidCharacters(System.String)">
            <summary> Ensures that a player name has the correct length and character set. </summary>
        </member>
        <member name="M:fCraft.Player.ResetIdleTimer">
            <summary> Resets the IdleTimer to 0. </summary>
        </member>
        <member name="M:fCraft.Player.Kick(fCraft.Player,System.String,fCraft.LeaveReason,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Advanced kick command. </summary>
            <param name="player"> Player who is kicking. </param>
            <param name="reason"> Reason for kicking. May be null or blank if allowed by server configuration. </param>
            <param name="context"> Classification of kick context. </param>
            <param name="announce"> Whether the kick should be announced publicly on the server and IRC. </param>
            <param name="raiseEvents"> Whether Player.BeingKicked and Player.Kicked events should be raised. </param>
            <param name="recordToPlayerDB"> Whether the kick should be counted towards player's record.</param>
        </member>
        <member name="M:fCraft.Player.ToString">
            <summary> Name formatted for the debugger. </summary>
        </member>
        <member name="M:fCraft.Player.SendNow(fCraft.Packet)">
            <summary> Send packet to player (not thread safe, sync, immediate).
            Should NEVER be used from any thread other than this session's ioThread.
            Not thread-safe (for performance reason). </summary>
        </member>
        <member name="M:fCraft.Player.Send(fCraft.Packet)">
            <summary> Send packet (thread-safe, async, priority queue).
            This is used for most packets (movement, chat, etc). </summary>
        </member>
        <member name="M:fCraft.Player.SendLowPriority(fCraft.Packet)">
            <summary> Send packet (thread-safe, asynchronous, delayed queue).
            This is currently only used for block updates. </summary>
        </member>
        <member name="M:fCraft.Player.ClearLowPriotityOutputQueue">
            <summary> Clears the low priority player queue. </summary>
        </member>
        <member name="M:fCraft.Player.ClearPriorityOutputQueue">
            <summary> Clears the priority player queue. </summary>
        </member>
        <member name="M:fCraft.Player.Kick(System.String,fCraft.LeaveReason)">
            <summary> Kick (asynchronous). Immediately blocks all client input, but waits
            until client thread has sent the kick packet. </summary>
        </member>
        <member name="M:fCraft.Player.KickNow(System.String,fCraft.LeaveReason)">
            <summary> Kick (synchronous). Immediately sends the kick packet.
            Can only be used from IoThread (this is not thread-safe). </summary>
        </member>
        <member name="M:fCraft.Player.WaitForDisconnect">
            <summary> Blocks the calling thread until this session disconnects. </summary>
        </member>
        <member name="P:fCraft.Player.State">
            <summary> Whether the player has completed the login sequence. </summary>
        </member>
        <member name="P:fCraft.Player.HasRegistered">
            <summary> Whether the player has completed the login sequence. </summary>
        </member>
        <member name="P:fCraft.Player.HasFullyConnected">
            <summary> Whether the player registered and then finished loading the world. </summary>
        </member>
        <member name="P:fCraft.Player.IsOnline">
            <summary> Whether the client is currently connected. </summary>
        </member>
        <member name="P:fCraft.Player.IsVerified">
            <summary> Whether the player name was verified at login. </summary>
        </member>
        <member name="P:fCraft.Player.Info">
            <summary> Persistent information record associated with this player. </summary>
        </member>
        <member name="P:fCraft.Player.IsPainting">
            <summary> Whether the player is in paint mode (deleting blocks replaces them). Used by /Paint. </summary>
        </member>
        <member name="P:fCraft.Player.IsDeaf">
            <summary> Whether player has blocked all incoming chat.
            Deaf players can't hear anything. </summary>
        </member>
        <member name="P:fCraft.Player.World">
            <summary> The world that the player is currently on. May be null.
            Use .JoinWorld() to make players teleport to another world. </summary>
        </member>
        <member name="P:fCraft.Player.WorldMap">
            <summary> Map from the world that the player is on.
            Throws PlayerOpException if player does not have a world.
            Loads the map if it's not loaded. Guaranteed to not return null. </summary>
        </member>
        <member name="P:fCraft.Player.LoginTime">
            <summary> Time when the session connected. </summary>
        </member>
        <member name="P:fCraft.Player.LastActiveTime">
            <summary> Last time when the player was active (moving/messaging). UTC. </summary>
        </member>
        <member name="P:fCraft.Player.LastPatrolTime">
            <summary> Last time when this player was patrolled by someone. </summary>
        </member>
        <member name="P:fCraft.Player.LastCommand">
            <summary> Last command called by the player. </summary>
        </member>
        <member name="P:fCraft.Player.Name">
            <summary> Plain version of the name (no formatting). </summary>
        </member>
        <member name="P:fCraft.Player.ListName">
            <summary> Name formatted for display in the player list. </summary>
        </member>
        <member name="P:fCraft.Player.TitleName">
            <summary>Name formatted for title display.</summary>
        </member>
        <member name="P:fCraft.Player.ClassyName">
            <summary> Name formatted for display in chat. </summary>
        </member>
        <member name="P:fCraft.Player.IsUsingWoM">
            <summary> Whether the client supports advanced WoM client functionality. </summary>
        </member>
        <member name="P:fCraft.Player.Metadata">
            <summary> Metadata associated with the session/player. </summary>
        </member>
        <member name="P:fCraft.Player.IgnoreList">
            <summary> Returns a list of all currently-ignored players. </summary>
        </member>
        <member name="P:fCraft.Player.ConfirmRequestTime">
            <summary> Time when the confirmation was requested. UTC. </summary>
        </member>
        <member name="P:fCraft.Player.LastUsedBlockType">
            <summary> Last blocktype used by the player.
            Make sure to use in conjunction with Player.GetBind() to ensure that bindings are properly applied. </summary>
        </member>
        <member name="P:fCraft.Player.MaxBlockPlacementRange">
            <summary> Max distance that player may be from a block to reach it (hack detection). </summary>
        </member>
        <member name="P:fCraft.Player.IsMakingSelection">
            <summary> Whether player is currently making a selection. </summary>
        </member>
        <member name="P:fCraft.Player.SelectionMarkCount">
            <summary> Number of selection marks so far. </summary>
        </member>
        <member name="P:fCraft.Player.SelectionMarksExpected">
            <summary> Number of marks expected to complete the selection. </summary>
        </member>
        <member name="P:fCraft.Player.IsRepeatingSelection">
            <summary> Whether player is repeating a selection (/static) </summary>
        </member>
        <member name="P:fCraft.Player.SpectatedPlayer">
            <summary> Player currently being spectated. Use Spectate/StopSpectate methods to set. </summary>
        </member>
        <member name="P:fCraft.Player.IdleTime">
            <summary> Time since the player was last active (moved, talked, or clicked). </summary>
        </member>
        <member name="E:fCraft.Player.Connecting">
            <summary> Occurs when a player is connecting (cancellable).
            Player name is verified and bans are checked before this event is raised. </summary>
        </member>
        <member name="E:fCraft.Player.Connected">
            <summary> Occurs when a player has connected, but before the player has joined any world.
            Allows changing the player's starting world. </summary>
        </member>
        <member name="E:fCraft.Player.Ready">
            <summary> Occurs after a player has connected and joined the starting world. </summary>
        </member>
        <member name="E:fCraft.Player.Moving">
            <summary> Occurs when player is about to move (cancellable). </summary>
        </member>
        <member name="E:fCraft.Player.Moved">
            <summary> Occurs when player has moved. </summary>
        </member>
        <member name="E:fCraft.Player.Clicking">
            <summary> Occurs when player clicked a block (cancellable).
            Note that a click will not necessarily result in a block being placed or deleted. </summary>
        </member>
        <member name="E:fCraft.Player.Clicked">
            <summary> Occurs after a player has clicked a block.
            Note that a click will not necessarily result in a block being placed or deleted. </summary>
        </member>
        <member name="E:fCraft.Player.PlacingBlock">
            <summary> Occurs when a player is about to place a block.
            Permission checks are done before calling this event, and their result may be overridden. </summary>
        </member>
        <member name="E:fCraft.Player.PlacedBlock">
            <summary>  Occurs when a player has placed a block.
            This event does not occur if the block placement was disallowed. </summary>
        </member>
        <member name="E:fCraft.Player.BeingKicked">
            <summary> Occurs before a player is kicked (cancellable). 
            Kick may be caused by /Kick, /Ban, /BanIP, or /BanAll commands, or by idling.
            Callbacks may override whether the kick will be announced or recorded in PlayerDB. </summary>
        </member>
        <member name="E:fCraft.Player.Kicked">
            <summary> Occurs after a player has been kicked. Specifically, it happens after
            kick has been announced and recorded to PlayerDB (if applicable), just before the
            target player disconnects.
            Kick may be caused by /Kick, /Ban, /BanIP, or /BanAll commands, or by idling. </summary>
        </member>
        <member name="E:fCraft.Player.HideChanged">
            <summary> Happens after a player has hidden or unhidden. </summary>
        </member>
        <member name="E:fCraft.Player.Disconnected">
            <summary> Occurs when a player disconnects. </summary>
        </member>
        <member name="E:fCraft.Player.JoiningWorld">
            <summary> Occurs when a player intends to join a world (cancellable). </summary>
        </member>
        <member name="E:fCraft.Player.JoinedWorld">
            <summary> Occurs after a player has joined a world. </summary>
        </member>
        <member name="P:fCraft.Player.BytesSent">
            <summary> Total bytes sent (to the client) this session. </summary>
        </member>
        <member name="P:fCraft.Player.BytesReceived">
            <summary> Total bytes received (from the client) this session. </summary>
        </member>
        <member name="P:fCraft.Player.BytesSentRate">
            <summary> Bytes sent (to the client) per second, averaged over the last several seconds. </summary>
        </member>
        <member name="P:fCraft.Player.BytesReceivedRate">
            <summary> Bytes received (from the client) per second, averaged over the last several seconds. </summary>
        </member>
        <member name="T:fCraft.PhysicsTask">
            <summary>
            Base class for physic tasks
            </summary>
        </member>
        <member name="F:fCraft.PhysicsTask.DueTime">
            <summary>
            the task due time in milliseconds since some start moment
            </summary>
        </member>
        <member name="F:fCraft.PhysicsTask.Deleted">
            <summary>
            The flag indicating that task must not be performed when due.
            This flag is introduced because the heap doesnt allow deletion of elements.
            It is possible to implement but far too complicated than just marking elements like that.
            </summary>
        </member>
        <member name="M:fCraft.PhysicsTask.Perform">
            <summary>
            Performs the action. The returned value is used as the reschedule delay. If 0 - the task is completed and
            should not be rescheduled
            </summary>
            <returns></returns>
        </member>
        <member name="M:fCraft.PhysicsTask.PerformInternal">
            <summary>
            The real implementation of the action
            </summary>
            <returns></returns>
        </member>
        <member name="M:fCraft.AutoRank.AutoRankManager.Add(fCraft.AutoRank.Criterion)">
            <summary> Adds a new criterion to the list. Throws an ArgumentException on duplicates. </summary>
        </member>
        <member name="M:fCraft.AutoRank.AutoRankManager.Check(fCraft.PlayerInfo)">
            <summary> Checks whether a given player is due for a promotion or demotion. </summary>
            <param name="info"> PlayerInfo to check. </param>
            <returns> Null if no rank change is needed, or a rank to promote/demote to. </returns>
        </member>
        <member name="P:fCraft.AutoRank.AutoRankManager.HasCriteria">
            <summary> Whether any criteria are defined. </summary>
        </member>
        <member name="T:fCraft.AutoRank.ComparisonOp">
            <summary>  Operators used to compare PlayerInfo fields. </summary>
        </member>
        <member name="F:fCraft.AutoRank.ComparisonOp.Eq">
            <summary> EQuals to </summary>
        </member>
        <member name="F:fCraft.AutoRank.ComparisonOp.Neq">
            <summary> Not EQual to </summary>
        </member>
        <member name="F:fCraft.AutoRank.ComparisonOp.Gt">
            <summary> Greater Than </summary>
        </member>
        <member name="F:fCraft.AutoRank.ComparisonOp.Gte">
            <summary> Greater Than or Equal </summary>
        </member>
        <member name="F:fCraft.AutoRank.ComparisonOp.Lt">
            <summary> Less Than </summary>
        </member>
        <member name="F:fCraft.AutoRank.ComparisonOp.Lte">
            <summary> Less Than or Equal </summary>
        </member>
        <member name="T:fCraft.AutoRank.ConditionField">
            <summary> Enumeration of quantifiable PlayerInfo fields (or field combinations) that may be used with AutoRank conditions. </summary>
        </member>
        <member name="F:fCraft.AutoRank.ConditionField.TimeSinceFirstLogin">
            <summary> Time since first login (first time the player connected), in seconds.
            For players who have been entered into PlayerDB but have never logged in, this is a huge value. </summary>
        </member>
        <member name="F:fCraft.AutoRank.ConditionField.TimeSinceLastLogin">
            <summary> Time since most recent login, in seconds.
            For players who have been entered into PlayerDB but have never logged in, this is a huge value.</summary>
        </member>
        <member name="F:fCraft.AutoRank.ConditionField.LastSeen">
            <summary> Time since player was last seen (0 if the player is online, otherwise time since last logout, in seconds).
            For players who have been entered into PlayerDB but have never logged in, this is a huge value.</summary>
        </member>
        <member name="F:fCraft.AutoRank.ConditionField.TotalTime">
            <summary> Total time spent on the server (including current session) in seconds.
            For players who have been entered into PlayerDB but have never logged in, this is 0.</summary>
        </member>
        <member name="F:fCraft.AutoRank.ConditionField.BlocksBuilt">
            <summary> Number of blocks that were built manually (by clicking).
            Does not include drawn or pasted blocks. </summary>
        </member>
        <member name="F:fCraft.AutoRank.ConditionField.BlocksDeleted">
            <summary> Number of blocks deleted manually (by clicking).
            Does not include drawn or cut blocks. </summary>
        </member>
        <member name="F:fCraft.AutoRank.ConditionField.BlocksChanged">
            <summary> Number of blocks changed (built + deleted) manually (by clicking).
            Does not include drawn or cut/paste blocks. </summary>
        </member>
        <member name="F:fCraft.AutoRank.ConditionField.BlocksDrawn">
            <summary> Number of blocks affected by drawing commands, replacement, and cut/paste. </summary>
        </member>
        <member name="F:fCraft.AutoRank.ConditionField.TimesVisited">
            <summary> Number of separate visits/sessions on this server. </summary>
        </member>
        <member name="F:fCraft.AutoRank.ConditionField.MessagesWritten">
            <summary> Number of messages written in chat.
            Includes normal chat, PMs, rank chat, /Staff, /Say, and /Me messages. </summary>
        </member>
        <member name="F:fCraft.AutoRank.ConditionField.TimesKicked">
            <summary> Number of times kicked by other players or by console.
            Does not include any kind of automated kicks (AFK kicks, anti-grief or anti-spam, server shutdown, etc). </summary>
        </member>
        <member name="F:fCraft.AutoRank.ConditionField.TimeSinceRankChange">
            <summary> Time since last promotion or demotion, in seconds.
            For new players (who still have the default rank) this is a huge value. </summary>
        </member>
        <member name="F:fCraft.AutoRank.ConditionField.TimeSinceLastKick">
            <summary> Time since the player has been kicked by other players or by console.
            Does not reset from any kind of automated kicks (AFK kicks, anti-grief or anti-spam, server shutdown, etc). </summary>
        </member>
        <member name="T:fCraft.LineWrapper">
            <summary> Intelligent line-wrapper for Minecraft protocol.
            Splits long messages into 64-character chunks of ASCII.
            Maintains colors between lines. Wraps at word boundaries and hyphens.
            Removes invalid characters and color sequences.
            Supports optional line prefixes for second and consequent lines.
            This class is implemented as IEnumerable of Packets, so it's usable with foreach() and Linq. </summary>
        </member>
        <member name="M:fCraft.LineWrapper.Wrap(System.String)">
            <summary> Creates a new line wrapper for a given raw string. </summary>
        </member>
        <member name="M:fCraft.LineWrapper.WrapPrefixed(System.String,System.String)">
            <summary> Creates a new line wrapper for a given raw string. </summary>
        </member>
        <member name="T:fCraft.Drawing.DrawOpWithBrush">
            <summary> A self-contained DrawOperation that prodivides its own brush.
            Purpose of this class is mostly to take care of the boilerplate code. </summary>
        </member>
        <member name="T:fCraft.Logger">
            <summary> Central logging class. Logs to file, relays messages to the frontend, submits crash reports. </summary>
        </member>
        <member name="E:fCraft.Logger.Logged">
            <summary> Occurs after a message has been logged. </summary>
        </member>
        <member name="E:fCraft.Logger.Crashed">
            <summary> Occurs when the server "crashes" (has an unhandled exception).
            Note that such occurences will not always cause shutdowns - check ShutdownImminent property.
            Reporting of the crash may be suppressed. </summary>
        </member>
        <member name="T:fCraft.LogType">
            <summary> Category of a log event. </summary>
        </member>
        <member name="F:fCraft.LogType.SystemActivity">
            <summary> System activity (loading/saving of data, shutdown and startup events, etc). </summary>
        </member>
        <member name="F:fCraft.LogType.Warning">
            <summary> Warnings (missing files, config discrepancies, minor recoverable errors, etc). </summary>
        </member>
        <member name="F:fCraft.LogType.Error">
            <summary> Recoverable errors (loading/saving problems, connection problems, etc). </summary>
        </member>
        <member name="F:fCraft.LogType.SeriousError">
            <summary> Critical non-recoverable errors and crashes. </summary>
        </member>
        <member name="F:fCraft.LogType.UserActivity">
            <summary> Routine user activity (command results, kicks, bans, etc). </summary>
        </member>
        <member name="F:fCraft.LogType.UserCommand">
            <summary> Raw commands entered by the player. </summary>
        </member>
        <member name="F:fCraft.LogType.SuspiciousActivity">
            <summary> Permission and hack related activity (name verification failures, banned players logging in, detected hacks, etc). </summary>
        </member>
        <member name="F:fCraft.LogType.GlobalChat">
            <summary> Normal (white) chat written by the players. </summary>
        </member>
        <member name="F:fCraft.LogType.PrivateChat">
            <summary> Private messages exchanged by players. </summary>
        </member>
        <member name="F:fCraft.LogType.RankChat">
            <summary> Rank chat messages. </summary>
        </member>
        <member name="F:fCraft.LogType.ConsoleInput">
            <summary> Messages and commands entered from console. </summary>
        </member>
        <member name="F:fCraft.LogType.ConsoleOutput">
            <summary> Messages printed to the console (typically as the result of commands called from console). </summary>
        </member>
        <member name="F:fCraft.LogType.IRC">
            <summary> Messages related to IRC activity.
            Does not include all messages relayed to/from IRC channels. </summary>
        </member>
        <member name="F:fCraft.LogType.Debug">
            <summary> Information useful for debugging (error details, routine events, system information). </summary>
        </member>
        <member name="F:fCraft.LogType.Trace">
            <summary> Special-purpose messages related to event tracing (never logged). </summary>
        </member>
        <member name="T:fCraft.LogSplittingType">
            <summary> Log splitting type. </summary>
        </member>
        <member name="F:fCraft.LogSplittingType.OneFile">
            <summary> All logs are written to one file. </summary>
        </member>
        <member name="F:fCraft.LogSplittingType.SplitBySession">
            <summary> A new timestamped logfile is made every time the server is started. </summary>
        </member>
        <member name="F:fCraft.LogSplittingType.SplitByDay">
            <summary> A new timestamped logfile is created every 24 hours. </summary>
        </member>
        <member name="T:fCraft.Position">
            <summary> Struct representing a position AND orientation. Takes up 8 bytes of memory.
            Use Vector3I if you just need X/Y/Z coordinates without orientation.
            Note that, as a struct, Positions are COPIED when assigned or passed as an argument. </summary>
        </member>
        <member name="M:LibNbt.Tags.NbtTag.Query``1(LibNbt.Queries.TagQuery,System.Boolean)">
            <summary>
            Queries the tag to easily find a tag in a structure.
            </summary>
            <typeparam name="T">Type of the tag to return.</typeparam>
            <param name="query">Tokenized query</param>
            <param name="bypassCheck">Bypass the name check when querying non-named queries.
            NbtList elements are an example.</param>
            <returns>The tag that was queried for.</returns>
        </member>
        <member name="T:fCraft.SchedulerTask">
            <summary> A task to be executed by the Scheduler.
            Stores timing information and state. </summary>
        </member>
        <member name="M:fCraft.SchedulerTask.RunOnce">
            <summary> Runs the task once, as quickly as possible.
            Callback is invoked from the Scheduler thread. </summary>
        </member>
        <member name="M:fCraft.SchedulerTask.RunOnce(System.TimeSpan)">
            <summary> Runs the task once, after a given delay. </summary>
        </member>
        <member name="M:fCraft.SchedulerTask.RunOnce(System.DateTime)">
            <summary> Runs the task once at a given date.
            If the given date is in the past, the task is ran immediately. </summary>
        </member>
        <member name="M:fCraft.SchedulerTask.RunOnce(System.Object,System.TimeSpan)">
            <summary> Runs the task once, after a given delay. </summary>
        </member>
        <member name="M:fCraft.SchedulerTask.RunOnce(System.Object,System.DateTime)">
            <summary> Runs the task once at a given date.
            If the given date is in the past, the task is ran immediately. </summary>
        </member>
        <member name="M:fCraft.SchedulerTask.RunForever(System.TimeSpan)">
            <summary> Runs the task forever at a given interval, until manually stopped. </summary>
        </member>
        <member name="M:fCraft.SchedulerTask.RunForever(System.TimeSpan,System.TimeSpan)">
            <summary> Runs the task forever at a given interval after an initial delay, until manually stopped. </summary>
        </member>
        <member name="M:fCraft.SchedulerTask.RunForever(System.Object,System.TimeSpan,System.TimeSpan)">
            <summary> Runs the task forever at a given interval after an initial delay, until manually stopped. </summary>
        </member>
        <member name="M:fCraft.SchedulerTask.RunRepeating(System.TimeSpan,System.TimeSpan,System.Int32)">
            <summary> Runs the task a given number of times, at a given interval after an initial delay. </summary>
        </member>
        <member name="M:fCraft.SchedulerTask.RunRepeating(System.Object,System.TimeSpan,System.TimeSpan,System.Int32)">
            <summary> Runs the task a given number of times, at a given interval after an initial delay. </summary>
        </member>
        <member name="M:fCraft.SchedulerTask.RunManual">
            <summary> Executes the task once immediately, and suspends (but does not stop).
            A SchedulerTask object can be reused many times if ran manually. </summary>
        </member>
        <member name="M:fCraft.SchedulerTask.RunManual(System.TimeSpan)">
            <summary> Executes the task once after a delay, and suspends (but does not stop).
            A SchedulerTask object can be reused many times if ran manually. </summary>
        </member>
        <member name="M:fCraft.SchedulerTask.RunManual(System.DateTime)">
            <summary> Executes the task once at a given time, and suspends (but does not stop).
            A SchedulerTask object can be reused many times if ran manually. </summary>
        </member>
        <member name="M:fCraft.SchedulerTask.Stop">
            <summary> Stops the task, and removes it from the schedule. </summary>
        </member>
        <member name="P:fCraft.SchedulerTask.NextTime">
            <summary> Next scheduled execution time (UTC). </summary>
        </member>
        <member name="P:fCraft.SchedulerTask.Delay">
            <summary> Initial execution delay. </summary>
        </member>
        <member name="P:fCraft.SchedulerTask.IsRecurring">
            <summary> Whether the task is one-use or recurring. </summary>
        </member>
        <member name="P:fCraft.SchedulerTask.IsBackground">
            <summary> Whether the task should be ran in the background. </summary>
        </member>
        <member name="P:fCraft.SchedulerTask.IsStopped">
            <summary> Whether the task has stopped.
            RunOnce tasks stop after first execution.
            RunForever and RunManual tasks only stop manually.
            RunRepeating stops after max number of repeats is reached. </summary>
        </member>
        <member name="P:fCraft.SchedulerTask.IsExecuting">
            <summary> Whether the task is currently being executed. </summary>
        </member>
        <member name="P:fCraft.SchedulerTask.AdjustForExecutionTime">
            <summary> Whether to adjust Interval for execution time (for recurring tasks).
            If enabled, the Interval timer is started as soon as execution starts.
            Total delay between executions is then equal to Interval.
            If disabled, the Interval timer is started only after execution finishes.
            Total delay between executions is then (time to execute + Interval). </summary>
        </member>
        <member name="P:fCraft.SchedulerTask.Interval">
            <summary> Interval between executions (for recurring tasks). </summary>
        </member>
        <member name="P:fCraft.SchedulerTask.MaxRepeats">
            <summary> Maximum number of repeats for RunRepeating tasks.
            Set to -1 to run forever. </summary>
        </member>
        <member name="P:fCraft.SchedulerTask.Callback">
            <summary> Method to call to execute the task. </summary>
        </member>
        <member name="P:fCraft.SchedulerTask.UserState">
            <summary> General-purpose persistent state object,
            can be used for anything you want. </summary>
        </member>
        <member name="M:fCraft.World.LoadMap">
            <summary> Loads the map file, if needed.
            Generates a default map if mapfile is missing or not loadable.
            Guaranteed to return a Map object. </summary>
        </member>
        <member name="M:fCraft.World.FindPlayerExact(System.String)">
            <summary> Gets player by name (without autocompletion) </summary>
        </member>
        <member name="M:fCraft.World.UpdatePlayerList">
            <summary> Caches the player list to an array (Players -> PlayerList) </summary>
        </member>
        <member name="M:fCraft.World.CountPlayers(System.Boolean)">
            <summary> Counts all players (optionally includes all hidden players). </summary>
        </member>
        <member name="M:fCraft.World.CountVisiblePlayers(fCraft.Player)">
            <summary> Counts only the players who are not hidden from a given observer. </summary>
        </member>
        <member name="M:fCraft.World.IsValidName(System.String)">
            <summary> Ensures that player name has the correct length (2-16 characters)
            and character set (alphanumeric chars and underscores allowed). </summary>
        </member>
        <member name="P:fCraft.World.Name">
            <summary> World name (no formatting).
            Use WorldManager.RenameWorld() method to change this. </summary>
        </member>
        <member name="P:fCraft.World.IsHidden">
            <summary> Whether the world shows up on the /Worlds list.
            Can be assigned directly. </summary>
        </member>
        <member name="P:fCraft.World.IsPendingMapUnload">
            <summary> Whether this world is currently pending unload 
            (waiting for block updates to finish processing before unloading). </summary>
        </member>
        <member name="P:fCraft.World.Map">
            <summary> Map of this world. May be null if world is not loaded. </summary>
        </member>
        <member name="P:fCraft.World.IsLoaded">
            <summary> Whether the map is currently loaded. </summary>
        </member>
        <member name="P:fCraft.World.MapFileName">
            <summary> Returns the map filename, including MapPath. </summary>
        </member>
        <member name="P:fCraft.World.IsLocked">
            <summary> Whether the world is currently locked (in read-only mode). </summary>
        </member>
        <member name="P:fCraft.World.ClassyName">
            <summary> Returns a nicely formatted name, with optional color codes. </summary>
        </member>
        <member name="T:fCraft.Config">
            <summary> Static class that handles loading/saving configuration, contains config defaults,
            and various configuration-related utilities. </summary>
        </member>
        <member name="F:fCraft.Config.ProtocolVersion">
            <summary>  Supported version of the Minecraft classic protocol. </summary>
        </member>
        <member name="F:fCraft.Config.CurrentVersion">
            <summary> Latest version of config.xml available at the time of building this copy of fCraft.
            Config.xml files saved with this build will have this version number embedded. </summary>
        </member>
        <member name="M:fCraft.Config.LoadDefaults">
            <summary> Overwrites current settings with defaults. </summary>
        </member>
        <member name="M:fCraft.Config.LoadDefaults(fCraft.ConfigSection)">
            <summary> Loads defaults for keys in a given ConfigSection. </summary>
        </member>
        <member name="M:fCraft.Config.IsDefault(fCraft.ConfigKey)">
            <summary> Checks whether given ConfigKey still has its default value. </summary>
        </member>
        <member name="M:fCraft.Config.GetDefault(fCraft.ConfigKey)">
            <summary> Provides the default value for a given ConfigKey. </summary>
        </member>
        <member name="M:fCraft.Config.Load(System.Boolean,System.Boolean)">
            <summary> Loads configuration from file. </summary>
            <param name="skipRankList"> If true, skips over rank definitions. </param>
            <param name="raiseReloadedEvent"> Whether ConfigReloaded event should be raised. </param>
            <returns> True if loading succeeded. </returns>
        </member>
        <member name="M:fCraft.Config.IsBlank(fCraft.ConfigKey)">
            <summary> Checks whether any value has been set for a given key. </summary>
        </member>
        <member name="M:fCraft.Config.GetString(fCraft.ConfigKey)">
            <summary> Returns raw value for the given key. </summary>
        </member>
        <member name="M:fCraft.Config.GetInt(fCraft.ConfigKey)">
            <summary> Attempts to parse given key's value as an integer.
            Throws a FormatException on failure. </summary>
        </member>
        <member name="M:fCraft.Config.TryGetInt(fCraft.ConfigKey,System.Int32@)">
            <summary> Attempts to parse a given key's value as an integer. </summary>
            <param name="key"> ConfigKey to get value from. </param>
            <param name="result"> Will be set to the value on success, or to 0 on failure. </param>
            <returns> Whether parsing succeeded. </returns>
        </member>
        <member name="M:fCraft.Config.GetEnum``1(fCraft.ConfigKey)">
            <summary> Attempts to parse a given key's value as an enumeration.
            An ArgumentException is thrown if value could not be parsed.
            Note the parsing is done in a case-insensitive way. </summary>
            <typeparam name="TEnum"> Enum to use for parsing.
            An ArgumentException will be thrown if this is not an enum. </typeparam>
        </member>
        <member name="M:fCraft.Config.Enabled(fCraft.ConfigKey)">
            <summary> Attempts to parse given key's value as a boolean.
            Throws a FormatException on failure. </summary>
        </member>
        <member name="M:fCraft.Config.TryGetBool(fCraft.ConfigKey,System.Boolean@)">
            <summary> Attempts to parse a given key's value as a boolean. </summary>
            <param name="key"> ConfigKey to get value from. </param>
            <param name="result"> Will be set to the value on success, or to false on failure. </param>
            <returns> Whether parsing succeeded. </returns>
        </member>
        <member name="M:fCraft.Config.GetValueType(fCraft.ConfigKey)">
            <summary> Returns the expected Type of the key's value, as specified in key metadata. </summary>
        </member>
        <member name="M:fCraft.Config.GetMetadata(fCraft.ConfigKey)">
            <summary> Returns the metadata container (ConfigKeyAttribute object) for a given key. </summary>
        </member>
        <member name="M:fCraft.Config.GetSection(fCraft.ConfigKey)">
            <summary> Returns the ConfigSection that a given key is associated with. </summary>
        </member>
        <member name="M:fCraft.Config.GetDescription(fCraft.ConfigKey)">
            <summary> Returns the description text for a given config key. </summary>
        </member>
        <member name="M:fCraft.Config.ResetValue(fCraft.ConfigKey)">
            <summary> Resets key value to its default setting. </summary>
            <param name="key"> Config key to reset. </param>
            <returns> True if value was reset. False if resetting was cancelled by an event handler/plugin. </returns>
        </member>
        <member name="M:fCraft.Config.SetValue(fCraft.ConfigKey,System.Object)">
            <summary> Sets value of a given config key.
            Note that this method may throw exceptions if the given value is not acceptible.
            Use Config.TrySetValue() if you'd like to suppress exceptions in favor of a boolean return value. </summary>
            <param name="key"> Config key to set. </param>
            <param name="rawValue"> Value to assign to the key. If passed object is not a string, rawValue.ToString() is used. </param>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.FormatException" />
            <returns> True if value is valid and has been assigned.
            False if value is valid, but assignment was cancelled by an event handler/plugin. </returns>
        </member>
        <member name="M:fCraft.Config.TrySetValue(fCraft.ConfigKey,System.Object)">
            <summary> Attempts to set the value of a given config key.
            Check the return value to make sure that the given value was acceptible. </summary>
            <param name="key"> Config key to set. </param>
            <param name="rawValue"> Value to assign to the key. If passed object is not a string, rawValue.ToString() is used. </param>
            <exception cref="T:System.ArgumentNullException" />
            <returns> True if value is valid and has been assigned.
            False if value was invalid, or if assignment was cancelled by an event handler/plugin. </returns>
        </member>
        <member name="M:fCraft.Config.ResetRanks">
            <summary> Resets the list of ranks to defaults (guest/builder/op/owner).
            Warning: This method is not thread-safe, and should never be used on a live server. </summary>
        </member>
        <member name="M:fCraft.Config.GetKeys(fCraft.ConfigSection)">
            <summary> Returns a list of all keys in a section. </summary>
        </member>
        <member name="E:fCraft.Config.Reloaded">
            <summary> Occurs after the entire configuration has been reloaded from file. </summary>
        </member>
        <member name="E:fCraft.Config.KeyChanging">
            <summary> Occurs when a config key is about to be changed (cancellable).
            The new value may be replaced by the callback. </summary>
        </member>
        <member name="E:fCraft.Config.KeyChanged">
            <summary> Occurs after a config key has been changed. </summary>
        </member>
        <member name="T:fCraft.Color">
            <summary> Static class with definitions of Minecraft color codes,
            parsers, converters, and utilities. </summary>
        </member>
        <member name="M:fCraft.Color.GetName(System.Char)">
            <summary> Gets color name for hex color code. </summary>
            <param name="code"> Hexadecimal color code (between '0' and 'f'). </param>
            <returns> Lowercase color name. </returns>
        </member>
        <member name="M:fCraft.Color.GetName(System.Int32)">
            <summary> Gets color name for a numeric color code. </summary>
            <param name="index"> Ordinal numeric color code (between 0 and 15). </param>
            <returns> Lowercase color name. If input is out of range, returns null. </returns>
        </member>
        <member name="M:fCraft.Color.GetName(System.String)">
            <summary> Gets color name for a string representation of a color. </summary>
            <param name="color"> Any parsable string representation of a color. </param>
            <returns> Lowercase color name.
            If input is an empty string, returns empty string.
            If input is null or cannot be parsed, returns null. </returns>
        </member>
        <member name="M:fCraft.Color.Parse(System.Char)">
            <summary> Parses a string to a format readable by Minecraft clients. 
            an accept color names and color codes (with or without the ampersand). </summary>
            <param name="code"> Color code character. </param>
            <returns> Two-character color string, readable by Minecraft client.
            If input is null or cannot be parsed, returns null. </returns>
        </member>
        <member name="M:fCraft.Color.Parse(System.Int32)">
            <summary> Parses a numeric color code to a string readable by Minecraft clients </summary>
            <param name="index"> Ordinal numeric color code (between 0 and 15). </param>
            <returns> Two-character color string, readable by Minecraft client.
            If input cannot be parsed, returns null. </returns>
        </member>
        <member name="M:fCraft.Color.Parse(System.String)">
            <summary> Parses a string to a format readable by Minecraft clients. 
            an accept color names and color codes (with or without the ampersand). </summary>
            <param name="color"> Ordinal numeric color code (between 0 and 15). </param>
            <returns> Two-character color string, readable by Minecraft client.
            If input is an empty string, returns empty string.
            If input is null or cannot be parsed, returns null. </returns>
        </member>
        <member name="M:fCraft.Color.IsValidColorCode(System.Char)">
            <summary>
            Checks whether a color code is valid (checks if it's hexadecimal char).
            </summary>
            <returns>True is char is valid, otherwise false</returns>
        </member>
        <member name="M:fCraft.Color.StripColors(System.String)">
            <summary> Strips all ampersand color codes, and unescapes doubled-up ampersands. </summary>
        </member>
        <member name="T:fCraft.Vector3F">
            <summary> Floating-point (single precision) 3D vector. </summary>
        </member>
        <member name="T:fCraft.PlayerInfo">
            <summary> Object representing persistent state ("record") of a player, online or offline.
            There is exactly one PlayerInfo object for each known Minecraft account. All data is stored in the PlayerDB. </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.DisplayedName">
            <summary> If set, replaces Name when printing name in chat. </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.TitleName">
            <summary>Player's title.</summary>
        </member>
        <member name="F:fCraft.PlayerInfo.ID">
            <summary> Player's unique numeric ID. Issued on first join. </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.FirstLoginDate">
            <summary> First time the player ever logged in, UTC.
            May be DateTime.MinValue if player has never been online. </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.LastLoginDate">
            <summary> Most recent time the player logged in, UTC.
            May be DateTime.MinValue if player has never been online. </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.LastSeen">
            <summary> Last time the player has been seen online (last logout), UTC.
            May be DateTime.MinValue if player has never been online. </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.LeaveReason">
            <summary> Reason for leaving the server last time. </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.PreviousRank">
            <summary> Player's previous rank.
            May be null if player has never been promoted/demoted before. </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.RankChangeDate">
            <summary> Date of the most recent promotion/demotion, UTC.
            May be DateTime.MinValue if player has never been promoted/demoted before. </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.RankChangedBy">
            <summary> Name of the entity that most recently promoted/demoted this player. May be empty. </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.RankChangeReason">
            <summary> Reason given for the most recent promotion/demotion. May be empty. </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.RankChangeType">
            <summary> Type of the most recent promotion/demotion. </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.BanStatus">
            <summary> Player's current BanStatus: Banned, NotBanned, or Exempt. </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.BanDate">
            <summary> Date of most recent ban, UTC. May be DateTime.MinValue if player was never banned. </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.BannedBy">
            <summary> Name of the entity responsible for most recent ban. May be empty. </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.BanReason">
            <summary> Reason given for the most recent ban. May be empty. </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.UnbanDate">
            <summary> Date of most recent unban, UTC. May be DateTime.MinValue if player was never unbanned. </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.UnbannedBy">
            <summary> Name of the entity responsible for most recent unban. May be empty. </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.UnbanReason">
            <summary> Reason given for the most recent unban. May be empty. </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.LastFailedLoginDate">
            <summary> Date of most recent failed attempt to log in, UTC. </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.LastFailedLoginIP">
            <summary> IP from which player most recently tried (and failed) to log in, UTC. </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.TotalTime">
            <summary> Total amount of time the player spent on this server. </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.BlocksBuilt">
            <summary> Total number of blocks manually built or painted by the player. </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.BlocksDeleted">
            <summary> Total number of blocks manually deleted by the player. </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.BlocksDrawn">
            <summary> Total number of blocks modified using draw and copy/paste commands. </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.TimesVisited">
            <summary> Number of sessions/logins. </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.MessagesWritten">
            <summary> Total number of messages written. </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.TimesKickedOthers">
            <summary> Number of kicks issues by this player. </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.TimesBannedOthers">
            <summary> Number of bans issued by this player. </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.TimesKicked">
            <summary> Number of times that this player has been manually kicked. </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.LastKickDate">
            <summary> Date of the most recent kick.
            May be DateTime.MinValue if the player has never been kicked. </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.LastKickBy">
            <summary> Name of the entity that most recently kicked this player. May be empty. </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.LastKickReason">
            <summary> Reason given for the most recent kick. May be empty. </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.IsFrozen">
            <summary> Whether this player is currently frozen. </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.FrozenOn">
            <summary> Date of the most recent freezing.
            May be DateTime.MinValue of the player has never been frozen. </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.FrozenBy">
            <summary> Name of the entity that most recently froze this player. May be empty. </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.MutedUntil">
            <summary> Date until which the player is muted. If the date is in the past, player is NOT muted. </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.MutedBy">
            <summary> Name of the entity that most recently muted this player. May be empty. </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.IsHidden">
            <summary> Whether the player is currently hidden.
            Use Player.CanSee() method to check visibility to specific observers. </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.LastIP">
            <summary> For offline players, last IP used to succesfully log in.
            For online players, current IP. </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.Password">
            <summary> Not implemented (IRC/server password hash). </summary>
        </member>
        <member name="F:fCraft.PlayerInfo.BannedUntil">
            <summary> Not implemented (for temp bans). </summary>
        </member>
        <member name="M:fCraft.PlayerInfo.Ban(fCraft.Player,System.String,System.Boolean,System.Boolean)">
            <summary> Bans given player. Kicks if online. Throws PlayerOpException on problems. </summary>
            <param name="player"> Player who is banning. </param>
            <param name="reason"> Reason for ban. May be empty, if permitted by server configuration. </param>
            <param name="announce"> Whether ban should be publicly announced on the server. </param>
            <param name="raiseEvents"> Whether BanChanging and BanChanged events should be raised. </param>
            <exception cref="T:fCraft.PlayerOpException"/>
        </member>
        <member name="M:fCraft.PlayerInfo.Unban(fCraft.Player,System.String,System.Boolean,System.Boolean)">
            <summary> Unbans a player. Throws PlayerOpException on problems. </summary>
            <param name="player"> Player who is unbanning. </param>
            <param name="reason"> Reason for unban. May be empty, if permitted by server configuration. </param>
            <param name="announce"> Whether unban should be publicly announced on the server. </param>
            <param name="raiseEvents"> Whether BanChanging and BanChanged events should be raised. </param>
            <exception cref="T:fCraft.PlayerOpException"/>
        </member>
        <member name="M:fCraft.PlayerInfo.BanIP(fCraft.Player,System.String,System.Boolean,System.Boolean)">
            <summary> Bans given player and their IP address.
            All players from IP are kicked. Throws PlayerOpException on problems. </summary>
            <param name="player"> Player who is banning. </param>
            <param name="reason"> Reason for ban. May be empty, if permitted by server configuration. </param>
            <param name="announce"> Whether ban should be publicly announced on the server. </param>
            <param name="raiseEvents"> Whether AddingIPBan, AddedIPBan,
            BanChanging, and BanChanged events should be raised. </param>
            <exception cref="T:fCraft.PlayerOpException"/>
        </member>
        <member name="M:fCraft.PlayerInfo.UnbanIP(fCraft.Player,System.String,System.Boolean,System.Boolean)">
            <summary> Unbans given player and their IP address. Throws PlayerOpException on problems. </summary>
            <param name="player"> Player who is unbanning. </param>
            <param name="reason"> Reason for unban. May be empty, if permitted by server configuration. </param>
            <param name="announce"> Whether unban should be publicly announced on the server. </param>
            <param name="raiseEvents"> Whether RemovingIPBan, RemovedIPBan,
            BanChanging, and BanChanged events should be raised. </param>
            <exception cref="T:fCraft.PlayerOpException"/>
        </member>
        <member name="M:fCraft.PlayerInfo.BanAll(fCraft.Player,System.String,System.Boolean,System.Boolean)">
            <summary> Bans given player, their IP, and all other accounts on IP.
            All players from IP are kicked. Throws PlayerOpException on problems. </summary>
            <param name="player"> Player who is banning. </param>
            <param name="reason"> Reason for ban. May be empty, if permitted by server configuration. </param>
            <param name="announce"> Whether ban should be publicly announced on the server. </param>
            <param name="raiseEvents"> Whether AddingIPBan, AddedIPBan,
            BanChanging, and BanChanged events should be raised. </param>
            <exception cref="T:fCraft.PlayerOpException"/>
        </member>
        <member name="M:fCraft.PlayerInfo.UnbanAll(fCraft.Player,System.String,System.Boolean,System.Boolean)">
            <summary> Unbans given player, their IP address, and all other accounts on IP.
            Throws PlayerOpException on problems. </summary>
            <param name="player"> Player who is unbanning. </param>
            <param name="reason"> Reason for unban. May be empty, if permitted by server configuration. </param>
            <param name="announce"> Whether unban should be publicly announced on the server. </param>
            <param name="raiseEvents"> Whether RemovingIPBan, RemovedIPBan,
            BanChanging, and BanChanged events should be raised. </param>
            <exception cref="T:fCraft.PlayerOpException"/>
        </member>
        <member name="M:fCraft.PlayerInfo.ChangeRank(fCraft.Player,fCraft.Rank,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary> Changes rank of the player (promotes or demotes). Throws PlayerOpException on problems. </summary>
            <param name="player"> Player who originated the promotion/demotion action. </param>
            <param name="newRank"> New rank. </param>
            <param name="reason"> Reason for promotion/demotion. </param>
            <param name="announce"> Whether rank change should be publicly announced or not. </param>
            <param name="raiseEvents"> Whether PlayerInfo.RankChanging and PlayerInfo.RankChanged events should be raised. </param>
            <param name="auto"> Whether rank change should be marked as "automatic" or manual. </param>
            <exception cref="T:fCraft.PlayerOpException"/>
        </member>
        <member name="M:fCraft.PlayerInfo.Freeze(fCraft.Player,System.Boolean,System.Boolean)">
            <summary> Freezes this player (prevents from moving, building, and from using most commands).
            Throws PlayerOpException on problems. </summary>
            <param name="player"> Player who is doing the freezing. </param>
            <param name="announce"> Whether to announce freezing publicly on the server. </param>
            <param name="raiseEvents"> Whether to raise PlayerInfo.FreezeChanging and PlayerInfo.FreezeChanged events. </param>
        </member>
        <member name="M:fCraft.PlayerInfo.Unfreeze(fCraft.Player,System.Boolean,System.Boolean)">
            <summary> Unfreezes this player. Throws PlayerOpException on problems. </summary>
            <param name="player"> Player who is doing the unfreezing. </param>
            <param name="announce"> Whether to announce freezing publicly on the server. </param>
            <param name="raiseEvents"> Whether to raise PlayerInfo.FreezeChanging and PlayerInfo.FreezeChanged events. </param>
        </member>
        <member name="M:fCraft.PlayerInfo.Mute(fCraft.Player,System.TimeSpan,System.Boolean,System.Boolean)">
            <summary> Mutes this player (prevents from writing chat messages). </summary>
            <param name="player"> Player who is doing the muting. </param>
            <param name="duration"> Duration of the mute. If a player is already muted for same or greater length of time,
            PlayerOpException is thrown with NoActionNeeded code. If a player is already muted for a shorter length of time,
            the mute duration is extended. </param>
            <param name="announce"> Whether to announce muting publicly on the sever. </param>
            <param name="raiseEvents"> Whether to raise PlayerInfo.MuteChanging and MuteChanged events. </param>
        </member>
        <member name="M:fCraft.PlayerInfo.Unmute(fCraft.Player,System.Boolean,System.Boolean)">
            <summary> Unmutes this player (allows them to write chat again). </summary>
            <param name="player"> Player who is doing the unmuting. </param>
            <param name="announce"> Whether to announce unmuting publicly on the sever. </param>
            <param name="raiseEvents"> Whether to raise PlayerInfo.MuteChanging and MuteChanged events. </param>
        </member>
        <member name="E:fCraft.PlayerInfo.Creating">
            <summary> Occurs when a new PlayerDB entry is being created.
            Allows editing the starting rank. Cancellable (kicks the player). </summary>
        </member>
        <member name="E:fCraft.PlayerInfo.Created">
            <summary> Occurs after a new PlayerDB entry has been created. </summary>
        </member>
        <member name="E:fCraft.PlayerInfo.RankChanging">
            <summary> Occurs when a player's rank is about to be changed (automatically or manually). </summary>
        </member>
        <member name="E:fCraft.PlayerInfo.RankChanged">
            <summary> Occurs after a player's rank was changed (automatically or manually). </summary>
        </member>
        <member name="E:fCraft.PlayerInfo.BanChanging">
            <summary> Occurs when a player is about to be banned or unbanned. Cancellable. </summary>
        </member>
        <member name="E:fCraft.PlayerInfo.BanChanged">
            <summary> Occurs after a player has been banned or unbanned. </summary>
        </member>
        <member name="E:fCraft.PlayerInfo.FreezeChanging">
            <summary> Occurs when a player is about to be frozen or unfrozen. </summary>
        </member>
        <member name="E:fCraft.PlayerInfo.FreezeChanged">
            <summary> Occurs after a player has been frozen or unfrozen. </summary>
        </member>
        <member name="E:fCraft.PlayerInfo.MuteChanging">
            <summary> Occurs when a player is about to be muted or unmuted. </summary>
        </member>
        <member name="E:fCraft.PlayerInfo.MuteChanged">
            <summary> Occurs after a player has been muted or unmuted. </summary>
        </member>
        <member name="P:fCraft.PlayerInfo.Name">
            <summary> Player's Minecraft account name. </summary>
        </member>
        <member name="P:fCraft.PlayerInfo.Rank">
            <summary> Player's current rank. </summary>
        </member>
        <member name="P:fCraft.PlayerInfo.IsBanned">
            <summary> Returns whether player is name-banned or not. </summary>
        </member>
        <member name="P:fCraft.PlayerInfo.IsMuted">
            <summary> Whether this player is currently muted. </summary>
        </member>
        <member name="P:fCraft.PlayerInfo.IsOnline">
            <summary> Whether the player is currently online.
            Another way to check online status is to check if PlayerObject is null. </summary>
        </member>
        <member name="P:fCraft.PlayerInfo.PlayerObject">
            <summary> If player is online, Player object associated with the session.
            If player is offline, null. </summary>
        </member>
        <member name="F:fCraft.PlayerOpExceptionCode.Other">
            <summary> Other/unknown/unexpected error. </summary>
        </member>
        <member name="F:fCraft.PlayerOpExceptionCode.CannotTargetSelf">
            <summary> Player cannot execute this operation on himself/herself. </summary>
        </member>
        <member name="F:fCraft.PlayerOpExceptionCode.NoActionNeeded">
            <summary> Operation is not needed (e.g. target is already in the desired state). </summary>
        </member>
        <member name="F:fCraft.PlayerOpExceptionCode.ReasonRequired">
            <summary> Server configuration requires a reason to be given to complete this operation. </summary>
        </member>
        <member name="F:fCraft.PlayerOpExceptionCode.PermissionMissing">
            <summary> A permission needed to execute this operation is missing. </summary>
        </member>
        <member name="F:fCraft.PlayerOpExceptionCode.PermissionLimitTooLow">
            <summary> All needed permissions are present, but rank limit is not high enough. </summary>
        </member>
        <member name="F:fCraft.PlayerOpExceptionCode.TargetIsExempt">
            <summary> Target cannot be affected by this operation. </summary>
        </member>
        <member name="F:fCraft.PlayerOpExceptionCode.MustBeInAWorld">
            <summary> Player must have a world to execute this operation. </summary>
        </member>
        <member name="F:fCraft.PlayerOpExceptionCode.Cancelled">
            <summary> Operation was cancelled by an event callback (e.g. by a mod or a plugin). </summary>
        </member>
        <member name="F:fCraft.PlayerOpExceptionCode.InvalidIP">
            <summary> Cannot ban IPAddress.Any or IPAddress.All. </summary>
        </member>
        <member name="T:fCraft.IPlayerEvent">
            <summary> An EventArgs for an event that directly relates to a particular player. </summary>
        </member>
        <member name="P:fCraft.Events.PlayerClickingEventArgs.Action">
            <summary> Whether the player is building a block (right-click) or deleting it (left-click). </summary>
        </member>
        <member name="P:fCraft.Events.PlayerKickedEventArgs.Player">
            <summary> Player who is being kicked. </summary>
        </member>
        <member name="P:fCraft.Events.PlayerKickedEventArgs.Kicker">
            <summary> Player who kicked. </summary>
        </member>
        <member name="P:fCraft.Events.PlayerKickedEventArgs.Reason">
            <summary> Given kick reason (may be blank). </summary>
        </member>
        <member name="P:fCraft.Events.PlayerKickedEventArgs.Announce">
            <summary> Whether the kick should be announced in-game and on IRC. </summary>
        </member>
        <member name="P:fCraft.Events.PlayerKickedEventArgs.RecordToPlayerDB">
            <summary> Whether kick should be added to the target's record. </summary>
        </member>
        <member name="P:fCraft.Events.PlayerKickedEventArgs.Context">
            <summary> Circumstances that resulted in a kick (e.g. Kick, Ban, BanIP, IdleKick, etc). </summary>
        </member>
        <member name="T:fCraft.WorldOpExceptionCode">
            <summary> List of common world operation issues. Used by WorldOpException. </summary>
        </member>
        <member name="F:fCraft.WorldOpExceptionCode.NoChangeNeeded">
            <summary> No changes were needed or made (e.g. renaming a world to the same name). </summary>
        </member>
        <member name="F:fCraft.WorldOpExceptionCode.InvalidWorldName">
            <summary> Given world name was of invalid format. </summary>
        </member>
        <member name="F:fCraft.WorldOpExceptionCode.WorldNotFound">
            <summary> Given world could not be found by name. </summary>
        </member>
        <member name="F:fCraft.WorldOpExceptionCode.DuplicateWorldName">
            <summary> A world could not be added or renamed because the name is taken by another world. </summary>
        </member>
        <member name="F:fCraft.WorldOpExceptionCode.SecurityError">
            <summary> A permission issue prohibited the operation. </summary>
        </member>
        <member name="F:fCraft.WorldOpExceptionCode.CannotDoThatToMainWorld">
            <summary> Operation may not be done on the world designated as main. </summary>
        </member>
        <member name="F:fCraft.WorldOpExceptionCode.MapNotFound">
            <summary> Specified map file could not be found. </summary>
        </member>
        <member name="F:fCraft.WorldOpExceptionCode.MapPathError">
            <summary> Given map path was invalid or inaccessible. </summary>
        </member>
        <member name="F:fCraft.WorldOpExceptionCode.MapLoadError">
            <summary> Map file was found but could not be loaded. </summary>
        </member>
        <member name="F:fCraft.WorldOpExceptionCode.MapSaveError">
            <summary> Map file could not be saved. </summary>
        </member>
        <member name="F:fCraft.WorldOpExceptionCode.MapMoveError">
            <summary> Map file could not be renamed, replaced, or moved. </summary>
        </member>
        <member name="F:fCraft.WorldOpExceptionCode.Cancelled">
            <summary> A plugin callback cancelled the operation. </summary>
        </member>
        <member name="T:fCraft.MapConversion.MapFCMv4">
            <summary> Next file format that fCraft shall use. </summary>
        </member>
        <member name="M:fCraft.MapConversion.MapFCMv4.ClaimsName(System.String)">
            <summary> Returns true if the filename (or directory name) matches this format's expectations. </summary>
        </member>
        <member name="M:fCraft.MapConversion.MapFCMv4.Claims(System.String)">
            <summary> Allows validating the map format while using minimal resources. </summary>
            <returns> Returns true if specified file/directory is valid for this format. </returns>
        </member>
        <member name="M:fCraft.MapConversion.MapFCMv4.LoadHeader(System.String)">
            <summary> Attempts to load map dimensions from specified location. </summary>
            <returns> Map object on success, or null on failure. </returns>
        </member>
        <member name="M:fCraft.MapConversion.MapFCMv4.Load(System.String)">
            <summary> Fully loads map from specified location. </summary>
            <returns> Map object on success, or null on failure. </returns>
        </member>
        <member name="M:fCraft.MapConversion.MapFCMv4.Save(fCraft.Map,System.String)">
            <summary> Saves given map at the given location. </summary>
            <returns> true if saving succeeded. </returns>
        </member>
        <member name="P:fCraft.MapConversion.MapFCMv4.ServerName">
            <summary> Returns name(s) of the server(s) that uses this format. </summary>
        </member>
        <member name="P:fCraft.MapConversion.MapFCMv4.StorageType">
            <summary> Returns the format type (file-based or directory-based). </summary>
        </member>
        <member name="P:fCraft.MapConversion.MapFCMv4.Format">
            <summary> Returns the format name. </summary>
        </member>
        <member name="T:fCraft.Trie`1">
            <summary> Specialized data structure for partial-matching of large sparse sets of words.
            Used as a searchable index of players for PlayerDB. </summary>
            <typeparam name="T"> Payload type (reference types only). </typeparam>
        </member>
        <member name="M:fCraft.Trie`1.#ctor">
            <summary> Creates a new empty trie. </summary>
        </member>
        <member name="M:fCraft.Trie`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}})">
            <summary> Creates a new trie from an existing dictionary. Values are shallowly copied. </summary>
            <param name="dictionary"> Source dictionary to copy from. </param>
        </member>
        <member name="M:fCraft.Trie`1.ContainsValue(`0)">
            <summary> Checks whether the trie contains a given value.
            This method uses the value enumerator and runs in O(n). </summary>
            <param name="value"> Value to search for. </param>
            <returns> True if the trie contains at least one copy of the value. </returns>
        </member>
        <member name="M:fCraft.Trie`1.GetOneMatch(System.String,`0@)">
            <summary> Searches for payloads with keys that start with keyPart, returning just one or none of the matches. </summary>
            <param name="keyPart"> Partial or full key. </param>
            <param name="payload"> Payload object to output (will be set to null if no single match was found). </param>
            <returns>
            If no matches were found, returns true and sets payload to null.
            If one match was found, returns true and sets payload to the value.
            If more than one match was found, returns false and sets payload to null.
            </returns>
        </member>
        <member name="M:fCraft.Trie`1.GetList(System.String,System.Int32)">
            <summary> Finds a list of payloads with keys that start with keyPart, up to a specified limit. Autocompletes. </summary>
            <param name="keyPart"> Partial or full key. </param>
            <param name="limit"> Limit on the number of payloads to find/return. </param>
            <returns> List of matches (if there are no matches, length is zero). </returns>
        </member>
        <member name="M:fCraft.Trie`1.Add(System.String,`0,System.Boolean)">
            <summary> Adds a new object by key. </summary>
            <param name="key"> Full key. </param>
            <param name="payload"> Object associated with the key. </param>
            <param name="overwriteOnDuplicate"> Whether to overwrite the value in case this key already exists. </param>
            <returns> True if object was added, false if an entry for this key already exists. </returns>
        </member>
        <member name="M:fCraft.Trie`1.Get(System.String)">
            <summary> Get payload for an exact key (no autocompletion). </summary>
            <param name="key"> Full key. </param>
            <returns> Payload object, if found. Null if not found. </returns>
        </member>
        <member name="M:fCraft.Trie`1.ValuesStartingWith(System.String)">
            <summary> Finds a subset of values whose keys start with a given prefix. </summary>
            <param name="prefix"> Key prefix. </param>
            <returns> Enumeration of values. </returns>
        </member>
        <member name="M:fCraft.Trie`1.KeysStartingWith(System.String)">
            <summary> Finds a subset of keys that start with a given prefix. </summary>
            <param name="prefix"> Key prefix. </param>
            <returns> Enumeration of keys. </returns>
        </member>
        <member name="M:fCraft.Trie`1.StartingWith(System.String)">
            <summary> Finds a subset of key/value pairs that start with a given prefix. </summary>
            <param name="prefix"> Key prefix. </param>
            <returns> Enumeration of key/value pairs. </returns>
        </member>
        <member name="M:fCraft.Trie`1.Add(System.String,`0)">
            <summary> Adds a new object by key. If an entry for this key already exists, it is NOT overwritten. </summary>
            <param name="key"> Full key. </param>
            <param name="payload"> Object associated with the key. </param>
            <returns> True if object was added, false if an entry for this key already exists. </returns>
        </member>
        <member name="M:fCraft.Trie`1.TryGetValue(System.String,`0@)">
            <summary> Tries to get a value by full key. </summary>
            <param name="key"> Full key to search for. </param>
            <param name="result"> Result. </param>
            <returns> True of a value was found for this key. </returns>
        </member>
        <member name="M:fCraft.Trie`1.ContainsKey(System.String)">
            <summary> Checks whether the trie contains a given full key. </summary>
            <param name="key"> Full key to search for. </param>
            <returns> True if the trie contains a given key. </returns>
        </member>
        <member name="M:fCraft.Trie`1.Remove(System.String)">
            <summary> Removes an entry by key. </summary>
            <param name="key"> Key for the entry to remove. </param>
            <returns> True if the entry was removed, false if no entry was found for this key. </returns>
        </member>
        <member name="M:fCraft.Trie`1.Clear">
            <summary> Removes all keys/values from the trie, making it empty. </summary>
        </member>
        <member name="T:fCraft.Trie`1.TrieSubset">
            <summary> A subset of trie's key/value pairs that start with a certain prefix. </summary>
        </member>
        <member name="T:fCraft.Packet">
            <summary> Packet struct, just a wrapper for a byte array. </summary>
        </member>
        <member name="M:fCraft.Packet.#ctor(fCraft.OpCode)">
            <summary> Creates a packet of correct size for a given opcode,
            and sets the first (opcode) byte. </summary>
        </member>
        <member name="M:fCraft.Packet.GetSize(fCraft.OpCode)">
            <summary> Returns packet size (in bytes) for a given opcode.
            Size includes the opcode byte itself. </summary>
        </member>
        <member name="T:fCraft.NoiseInterpolationMode">
            <summary> Interpolation mode for perlin noise. </summary>
        </member>
        <member name="F:fCraft.NoiseInterpolationMode.Linear">
            <summary> Bilinear (LERP) interpolation (fastest). </summary>
        </member>
        <member name="F:fCraft.NoiseInterpolationMode.Cosine">
            <summary> Cosine interpolation (fast). </summary>
        </member>
        <member name="F:fCraft.NoiseInterpolationMode.Bicubic">
            <summary> Bicubic interpolation (slow). </summary>
        </member>
        <member name="F:fCraft.NoiseInterpolationMode.Spline">
            <summary> Spline interpolation (slowest). </summary>
        </member>
        <member name="T:fCraft.Noise">
            <summary> Class for generating and filtering 2D noise, extensively used by MapGenerator. </summary>
        </member>
        <member name="T:fCraft.WorldCommands">
            <summary> Contains commands related to world management. </summary>
        </member>
        <member name="M:fCraft.Alice.#ctor">
            <summary>
            Create a new instance of the ALICE object
            </summary>
        </member>
        <member name="M:fCraft.Alice.Initialize">
            <summary>
            This initialization can be put in the alice() method
            but I kept it seperate due to the nature of my program.
            This method loads all the AIML files located in the \AIML folder
            </summary>
        </member>
        <member name="M:fCraft.Alice.getOutput(System.String)">
            <summary>
            This method takes an input string, then finds a response using the the AIMLbot library and returns it
            </summary>
            <param name="input">Input Text</param>
            <returns>Response</returns>
        </member>
        <member name="T:fCraft.ConfigKeyAttribute">
            <summary> Describes attributes and metadata of a configuration key. </summary>
        </member>
        <member name="T:fCraft.Heartbeat">
            <summary> Static class responsible for sending heartbeats. </summary>
        </member>
        <member name="P:fCraft.Heartbeat.Delay">
            <summary> Delay between sending heartbeats. Default: 25s </summary>
        </member>
        <member name="P:fCraft.Heartbeat.Timeout">
            <summary> Request timeout for heartbeats. Default: 10s </summary>
        </member>
        <member name="P:fCraft.Heartbeat.Salt">
            <summary> Secret string used to verify players' names.
            Randomly generated at startup.
            Known only to this server and to heartbeat servers. </summary>
        </member>
        <member name="E:fCraft.Heartbeat.Sending">
            <summary> Occurs when a heartbeat is about to be sent (cancellable). </summary>
        </member>
        <member name="E:fCraft.Heartbeat.Sent">
            <summary> Occurs when a heartbeat has been sent. </summary>
        </member>
        <member name="E:fCraft.Heartbeat.UriChanged">
            <summary> Occurs when the server Uri has been set or changed. </summary>
        </member>
        <member name="T:fCraft.BoundingBox">
            <summary>
            Defines a 3D bounding box, in integer cartesian coordinates
            </summary>
        </member>
        <member name="M:fCraft.BoundingBox.#ctor(fCraft.Vector3I,fCraft.Vector3I)">
            <summary> Constructs a bounding box using two vectors as opposite corners. </summary>
        </member>
        <member name="M:fCraft.BoundingBox.#ctor(fCraft.Vector3I,System.Int32,System.Int32,System.Int32)">
            <summary> Constructs a bounding box at a given origin, with given dimensions. </summary>
            <param name="origin"> Origin point of the bounding box. </param>
            <param name="width"> Width (X-axis, horizontal). May be negative. </param>
            <param name="length"> Length (Y-axis, horizontal). May be negative. </param>
            <param name="height"> Width (Z-axis, vertical). May be negative. </param>
        </member>
        <member name="M:fCraft.BoundingBox.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> Constructs a bounding box between two given coordinates. </summary>
        </member>
        <member name="M:fCraft.BoundingBox.Insersects(fCraft.BoundingBox)">
            <summary> Checks whether this bounding box intersects/touches another one. </summary>
        </member>
        <member name="M:fCraft.BoundingBox.Contains(fCraft.BoundingBox)">
            <summary> Checks if another bounding box is wholly contained inside this one. </summary>
        </member>
        <member name="M:fCraft.BoundingBox.Contains(System.Int32,System.Int32,System.Int32)">
            <summary> Checks if a given point is inside this bounding box. </summary>
        </member>
        <member name="M:fCraft.BoundingBox.Contains(fCraft.Vector3I)">
            <summary> Checks if a given point is inside this bounding box. </summary>
        </member>
        <member name="M:fCraft.BoundingBox.GetIntersection(fCraft.BoundingBox)">
            <summary> Returns a BoundingBox object that describes the space shared between this and another box. </summary>
            <returns> Intersecting volume, or BoundingBox.Empty if there is no overlap. </returns>
        </member>
        <member name="P:fCraft.BoundingBox.MinVertex">
            <summary> Returns the vertex closest to the coordinate origin, opposite MaxVertex. </summary>
        </member>
        <member name="P:fCraft.BoundingBox.MaxVertex">
            <summary> Returns the vertex farthest from the origin, opposite MinVertex. </summary>
        </member>
        <member name="M:fCraft.MapConversion.IConverterExtension.Serialize(fCraft.Map,System.IO.Stream,fCraft.MapConversion.IMapConverterEx)">
            <summary>
            Serializes the extended data as metadata and returns the number of written keys
            </summary>
            <returns>
            The number of written keys
            </returns>
        </member>
        <member name="M:fCraft.MapConversion.IConverterExtension.Deserialize(System.String,System.String,System.String,fCraft.Map)">
            <summary>
            Instantiates the extended data for the given map from the group, key, and value
            </summary>
        </member>
        <member name="P:fCraft.MapConversion.IConverterExtension.AcceptedGroups">
            <summary>
            Returns groups procesed by this extension
            </summary>
            <returns></returns>
        </member>
        <member name="T:fCraft.Paths">
            <summary> Contains fCraft path settings, and some filesystem-related utilities. </summary>
        </member>
        <member name="M:fCraft.Paths.TestDirectory(System.String,System.String,System.Boolean)">
            <summary> Makes sure that the path format is valid, that it exists, that it is accessible and writeable. </summary>
            <param name="pathLabel"> Name of the path that's being tested (e.g. "map path"). Used for logging. </param>
            <param name="path"> Full or partial path. </param>
            <param name="checkForWriteAccess"> If set, tries to write to the given directory. </param>
            <returns> Full path of the directory (on success) or null (on failure). </returns>
        </member>
        <member name="M:fCraft.Paths.TestFile(System.String,System.String,System.Boolean,System.IO.FileAccess)">
            <summary> Makes sure that the path format is valid, and optionally whether it is readable/writeable. </summary>
            <param name="fileLabel"> Name of the path that's being tested (e.g. "map path"). Used for logging. </param>
            <param name="filename"> Full or partial path of the file. </param>
            <param name="createIfDoesNotExist"> If target file is missing and this option is OFF, TestFile returns true.
            If target file is missing and this option is ON, TestFile tries to create
            a file and returns whether it succeeded. </param>
            <param name="neededAccess"> If file is present, type of access to test. </param>
            <returns> Whether target file passed all tests. </returns>
        </member>
        <member name="M:fCraft.Paths.Compare(System.String,System.String)">
            <summary>Returns true if paths or filenames reference the same location (accounts for all the filesystem quirks).</summary>
        </member>
        <member name="M:fCraft.Paths.Compare(System.String,System.String,System.Boolean)">
            <summary>Returns true if paths or filenames reference the same location (accounts for all the filesystem quirks).</summary>
        </member>
        <member name="M:fCraft.Paths.Contains(System.String,System.String)">
            <summary> Checks whether childPath is inside parentPath </summary>
            <param name="parentPath">Path that is supposed to contain childPath</param>
            <param name="childPath">Path that is supposed to be contained within parentPath</param>
            <returns>true if childPath is contained within parentPath</returns>
        </member>
        <member name="M:fCraft.Paths.Contains(System.String,System.String,System.Boolean)">
            <summary> Checks whether childPath is inside parentPath </summary>
            <param name="parentPath"> Path that is supposed to contain childPath </param>
            <param name="childPath"> Path that is supposed to be contained within parentPath </param>
            <param name="caseSensitive"> Whether check should be case-sensitive or case-insensitive. </param>
            <returns> true if childPath is contained within parentPath </returns>
        </member>
        <member name="M:fCraft.Paths.FileExists(System.String,System.Boolean)">
            <summary> Checks whether the file exists in a specified way (case-sensitive or case-insensitive) </summary>
            <param name="fileName"> filename in question </param>
            <param name="caseSensitive"> Whether check should be case-sensitive or case-insensitive. </param>
            <returns> true if file exists, otherwise false </returns>
        </member>
        <member name="M:fCraft.Paths.Exists(System.IO.FileInfo,System.Boolean)">
            <summary>Checks whether the file exists in a specified way (case-sensitive or case-insensitive)</summary>
            <param name="fileInfo">FileInfo object in question</param>
            <param name="caseSensitive">Whether check should be case-sensitive or case-insensitive.</param>
            <returns>true if file exists, otherwise false</returns>
        </member>
        <member name="M:fCraft.Paths.ForceRename(System.String,System.String)">
            <summary> Allows making changes to filename capitalization on case-insensitive filesystems. </summary>
            <param name="originalFullFileName"> Full path to the original filename </param>
            <param name="newFileName"> New file name (do not include the full path) </param>
        </member>
        <member name="M:fCraft.Paths.FindFiles(System.String)">
            <summary> Find files that match the name in a case-insensitive way. </summary>
            <param name="fullFileName"> Case-insensitive filename to look for. </param>
            <returns> Array of matches. Empty array if no files matches. </returns>
        </member>
        <member name="P:fCraft.Paths.MapPath">
            <summary> Path to save maps to (default: .\maps)
            Can be overridden at startup via command-line argument "--mappath=",
            or via "MapPath" ConfigKey </summary>
        </member>
        <member name="P:fCraft.Paths.WorkingPath">
            <summary> Working path (default: whatever directory fCraft.dll is located in)
            Can be overridden at startup via command line argument "--path=" </summary>
        </member>
        <member name="P:fCraft.Paths.LogPath">
            <summary> Path to save logs to (default: .\logs)
            Can be overridden at startup via command-line argument "--logpath=" </summary>
        </member>
        <member name="P:fCraft.Paths.ConfigFileName">
            <summary> Path to load/save config to/from (default: .\config.xml)
            Can be overridden at startup via command-line argument "--config=" </summary>
        </member>
        <member name="P:fCraft.Paths.BackupPath">
            <summary> Path where map backups are stored </summary>
        </member>
        <member name="T:fCraft.PlayerEnumerable">
            <summary> Contains a set of utilities that simplify working with sets of players.
            All the utilities are implemented as extension methods,
            and it is recommended that you invoke them as extension methods. </summary>
        </member>
        <member name="M:fCraft.PlayerEnumerable.Ranked(System.Collections.Generic.IEnumerable{fCraft.Player},fCraft.Rank)">
            <summary> Filters a collection of players, leaving only those of the given rank. </summary>
            <param name="source"> Original collection of players. Will not get modified. </param>
            <param name="rank"> Desired rank. </param>
            <returns> Filtered collection of players. </returns>
        </member>
        <member name="M:fCraft.PlayerEnumerable.NotRanked(System.Collections.Generic.IEnumerable{fCraft.Player},fCraft.Rank)">
            <summary> Filters a collection of players, leaving only those NOT of the given rank. </summary>
            <param name="source"> Original collection of players. Will not get modified. </param>
            <param name="rank"> Undesired rank. </param>
            <returns> Filtered collection of players. </returns>
        </member>
        <member name="M:fCraft.PlayerEnumerable.RankedAbove(System.Collections.Generic.IEnumerable{fCraft.Player},fCraft.Rank)">
            <summary> Filters a collection of players, leaving only those above the given rank. </summary>
            <param name="source"> Original collection of players. Will not get modified. </param>
            <param name="minRank"> All ranks above this one will be kept. This and lower ranks will be filtered out. </param>
            <returns> Filtered collection of players. </returns>
        </member>
        <member name="M:fCraft.PlayerEnumerable.RankedAtLeast(System.Collections.Generic.IEnumerable{fCraft.Player},fCraft.Rank)">
            <summary> Filters a collection of players, leaving only those of or above the given rank. </summary>
            <param name="source"> Original collection of players. Will not get modified. </param>
            <param name="minRank"> Minimum desired rank. </param>
            <returns> Filtered collection of players. </returns>
        </member>
        <member name="M:fCraft.PlayerEnumerable.RankedBelow(System.Collections.Generic.IEnumerable{fCraft.Player},fCraft.Rank)">
            <summary> Filters a collection of players, leaving only those below the given rank. </summary>
            <param name="source"> Original collection of players. Will not get modified. </param>
            <param name="maxRank"> All ranks below this one will be kept. This and higher ranks will be filtered out. </param>
            <returns> Filtered collection of players. </returns>
        </member>
        <member name="M:fCraft.PlayerEnumerable.RankedAtMost(System.Collections.Generic.IEnumerable{fCraft.Player},fCraft.Rank)">
            <summary> Filters a collection of players, leaving only those of or below the given rank. </summary>
            <param name="source"> Original collection of players. Will not get modified. </param>
            <param name="maxRank"> Maximum desired rank. </param>
            <returns> Filtered collection of players. </returns>
        </member>
        <member name="M:fCraft.PlayerEnumerable.Can(System.Collections.Generic.IEnumerable{fCraft.Player},fCraft.Permission)">
            <summary> Filters a collection of players, leaving only those who have the given permission. </summary>
            <param name="source"> Original collection of players. Will not get modified. </param>
            <param name="permission"> Permission that players are required to have. </param>
            <returns> Filtered collection of players. </returns>
        </member>
        <member name="M:fCraft.PlayerEnumerable.Can(System.Collections.Generic.IEnumerable{fCraft.Player},fCraft.Permission,fCraft.Rank)">
            <summary> Filters a collection of players, leaving only those who have the given permission,
            and with permission limits allowing operation on the given rank. </summary>
            <param name="source"> Original collection of players. Will not get modified. </param>
            <param name="permission"> Permission that players are required to have. </param>
            <param name="affectedRank"> Permission limit will be checked against this rank. </param>
            <returns> Filtered collection of players. </returns>
        </member>
        <member name="M:fCraft.PlayerEnumerable.Cant(System.Collections.Generic.IEnumerable{fCraft.Player},fCraft.Permission)">
            <summary> Filters a collection of players, leaving only those who do NOT have the given permission. </summary>
            <param name="source"> Original collection of players. Will not get modified. </param>
            <param name="permission"> Permission that players are required to NOT have. </param>
            <returns> Filtered collection of players. </returns>
        </member>
        <member name="M:fCraft.PlayerEnumerable.Cant(System.Collections.Generic.IEnumerable{fCraft.Player},fCraft.Permission,fCraft.Rank)">
            <summary> Filters a collection of players, leaving only those who do NOT have the given permission,
            or with permission limits NOT allowing operation on the given rank. </summary>
            <param name="source"> Original collection of players. Will not get modified. </param>
            <param name="permission"> Permission that players are required to NOT have. </param>
            <param name="affectedRank"> Permission limit will be checked against this rank. </param>
            <returns> Filtered collection of players. </returns>
        </member>
        <member name="M:fCraft.PlayerEnumerable.CanSee(System.Collections.Generic.IEnumerable{fCraft.Player},fCraft.Player)">
            <summary> Filters a collection of players, leaving only those who can see the target.
            Does not include the target itself. </summary>
            <param name="source"> Original collection of players. Will not get modified. </param>
            <param name="targetPlayer"> Player whose visibility is being tested. </param>
            <returns> Filtered collection of players. </returns>
        </member>
        <member name="M:fCraft.PlayerEnumerable.CantSee(System.Collections.Generic.IEnumerable{fCraft.Player},fCraft.Player)">
            <summary> Filters a collection of players, leaving only those who can NOT see the target.
            Does not include the target itself. </summary>
            <param name="source"> Original collection of players. Will not get modified. </param>
            <param name="targetPlayer"> Player whose visibility is being tested. </param>
            <returns> Filtered collection of players. </returns>
        </member>
        <member name="M:fCraft.PlayerEnumerable.CanBeSeen(System.Collections.Generic.IEnumerable{fCraft.Player},fCraft.Player)">
            <summary> Filters a collection of players, leaving only those who can be seen by the given player. </summary>
            <param name="source"> Original collection of players. Will not get modified. </param>
            <param name="observer"> Player whose vision is being tested. </param>
            <returns> Filtered collection of players. </returns>
        </member>
        <member name="M:fCraft.PlayerEnumerable.CantBeSeen(System.Collections.Generic.IEnumerable{fCraft.Player},fCraft.Player)">
            <summary> Filters a collection of players, leaving only those who can NOT be seen by the given player. </summary>
            <param name="source"> Original collection of players. Will not get modified. </param>
            <param name="observer"> Player whose vision is being tested. </param>
            <returns> Filtered collection of players. </returns>
        </member>
        <member name="M:fCraft.PlayerEnumerable.Ignoring(System.Collections.Generic.IEnumerable{fCraft.Player},fCraft.Player)">
            <summary> Filters a collection of players, leaving only those who are ignoring the given player. </summary>
            <param name="source"> Original collection of players. Will not get modified. </param>
            <param name="player"> Player whose ignore standing is being checked. </param>
            <returns> Filtered collection of players. </returns>
        </member>
        <member name="M:fCraft.PlayerEnumerable.NotIgnoring(System.Collections.Generic.IEnumerable{fCraft.Player},fCraft.Player)">
            <summary> Filters a collection of players, leaving only those who are NOT ignoring the given player. </summary>
            <param name="source"> Original collection of players. Will not get modified. </param>
            <param name="player"> Player whose ignore standing is being checked. </param>
            <returns> Filtered collection of players. </returns>
        </member>
        <member name="M:fCraft.PlayerEnumerable.Ignoring(System.Collections.Generic.IEnumerable{fCraft.Player},fCraft.PlayerInfo)">
            <summary> Filters a collection of players, leaving only those who are ignoring the given player. </summary>
            <param name="source"> Original collection of players. Will not get modified. </param>
            <param name="playerInfo"> Player whose ignore standing is being checked. </param>
            <returns> Filtered collection of players. </returns>
        </member>
        <member name="M:fCraft.PlayerEnumerable.NotIgnoring(System.Collections.Generic.IEnumerable{fCraft.Player},fCraft.PlayerInfo)">
            <summary> Filters a collection of players, leaving only those who are NOT ignoring the given player. </summary>
            <param name="source"> Original collection of players. Will not get modified. </param>
            <param name="playerInfo"> Player whose ignore standing is being checked. </param>
            <returns> Filtered collection of players. </returns>
        </member>
        <member name="M:fCraft.PlayerEnumerable.IgnoredBy(System.Collections.Generic.IEnumerable{fCraft.Player},fCraft.Player)">
            <summary> Filters a collection of players, leaving only those who are ignored by the given player. </summary>
            <param name="source"> Original collection of players. Will not get modified. </param>
            <param name="ignorer"> Player whose disposition is being checked. </param>
            <returns> Filtered collection of players. </returns>
        </member>
        <member name="M:fCraft.PlayerEnumerable.NotIgnoredBy(System.Collections.Generic.IEnumerable{fCraft.Player},fCraft.Player)">
            <summary> Filters a collection of players, leaving only those who are NOT ignored by the given player. </summary>
            <param name="source"> Original collection of players. Will not get modified. </param>
            <param name="ignorer"> Player whose disposition is being checked. </param>
            <returns> Filtered collection of players. </returns>
        </member>
        <member name="M:fCraft.PlayerEnumerable.InWorld(System.Collections.Generic.IEnumerable{fCraft.Player},fCraft.World)">
            <summary> Filters a collection of players, leaving only those who are currently located on the given world. </summary>
            <param name="source"> Original collection of players. Will not get modified. </param>
            <param name="world"> World that players are desired to be on. </param>
            <returns> Filtered collection of players. </returns>
        </member>
        <member name="M:fCraft.PlayerEnumerable.NotInWorld(System.Collections.Generic.IEnumerable{fCraft.Player},fCraft.World)">
            <summary> Filters a collection of players, leaving only those who are currently NOT located on the given world. </summary>
            <param name="source"> Original collection of players. Will not get modified. </param>
            <param name="world"> World that players are desired to NOT be on. </param>
            <returns> Filtered collection of players. </returns>
        </member>
        <member name="M:fCraft.PlayerEnumerable.Union(System.Collections.Generic.IEnumerable{fCraft.Player},fCraft.Player)">
            <summary> Adds players to the given set.
            ]If the given sequence of players already contains player, no duplicate is added.
            Precisely speaking, produces the set union of a given collection of players and a given player. </summary>
            <param name="source"> Original set of players. Will not get modified. </param>
            <param name="includedPlayer"> Player to add to the set. </param>
            <returns> A set that contains all players in the input sequence, plus the given player. </returns>
        </member>
        <member name="M:fCraft.PlayerEnumerable.Except(System.Collections.Generic.IEnumerable{fCraft.Player},fCraft.Player)">
            <summary> Removes player from the given set.
            Precisely speaking, produces the set difference between the given collection of players and a given player. </summary>
            <param name="source"> Original set of players. Will not get modified. </param>
            <param name="excludedPlayer"> Player to remove from the set. </param>
            <returns> A set that contains all players in the input sequence, minus the given player. </returns>
        </member>
        <member name="M:fCraft.PlayerEnumerable.FromIP(System.Collections.Generic.IEnumerable{fCraft.Player},System.Net.IPAddress)">
            <summary> Filters a collection of players, leaving only those connected from a given IP. </summary>
            <param name="source"> Original collection of players. Will not get modified. </param>
            <param name="ip"> IP that we are including. </param>
            <returns> Filtered collection of players. </returns>
        </member>
        <member name="M:fCraft.PlayerEnumerable.NotFromIP(System.Collections.Generic.IEnumerable{fCraft.Player},System.Net.IPAddress)">
            <summary> Filters a collection of players, leaving only those NOT connected from a given IP. </summary>
            <param name="source"> Original collection of players. Will not get modified. </param>
            <param name="ip"> IP that we are excluding. </param>
            <returns> Filtered collection of players. </returns>
        </member>
        <member name="M:fCraft.PlayerEnumerable.Message(System.Collections.Generic.IEnumerable{fCraft.Player},System.String)">
            <summary> Broadcasts a message. </summary>
            <param name="source"> List of players who will receive the message. </param>
            <param name="message"> String/message to send. </param>
            <returns> Number of players who received the message. </returns>
        </member>
        <member name="M:fCraft.PlayerEnumerable.Message(System.Collections.Generic.IEnumerable{fCraft.Player},fCraft.Player,System.String)">
            <summary> Broadcasts a message. </summary>
            <param name="source"> List of players who will receive the message. </param>
            <param name="except"> Player to exclude from the recepient list. </param>
            <param name="message"> String/message to send. </param>
            <returns> Number of players who received the message. </returns>
        </member>
        <member name="M:fCraft.PlayerEnumerable.Message(System.Collections.Generic.IEnumerable{fCraft.Player},fCraft.Player,System.String,System.Object[])">
            <summary> Formats and broadcasts a message. </summary>
            <param name="source"> List of players who will receive the message. </param>
            <param name="except"> Player to exclude from the recepient list. </param>
            <param name="message"> String/message to send. </param>
            <param name="formatArgs"> Format parameters. Same semantics as String.Format </param>
            <returns> Number of players who received the message. </returns>
        </member>
        <member name="M:fCraft.PlayerEnumerable.Message(System.Collections.Generic.IEnumerable{fCraft.Player},System.String,System.Object[])">
            <summary> Formats and broadcasts a message. </summary>
            <param name="source"> List of players who will receive the message. </param>
            <param name="message"> String/message to send. </param>
            <param name="formatArgs"> Format parameters. Same semantics as String.Format </param>
            <returns> Number of players who received the message. </returns>
        </member>
        <member name="M:fCraft.PlayerEnumerable.MessagePrefixed(System.Collections.Generic.IEnumerable{fCraft.Player},System.String,System.String)">
            <summary> Broadcasts a message, prefixing wrapped lines. </summary>
            <param name="source"> List of players who will receive the message. </param>
            <param name="prefix"> Prefix to prepend to prepend to each line after the 1st,
            if any line-wrapping occurs. Does NOT get prepended to first line. </param>
            <param name="message"> String/message to send. </param>
            <returns> Number of players who received the message. </returns>
        </member>
        <member name="M:fCraft.PlayerEnumerable.MessagePrefixed(System.Collections.Generic.IEnumerable{fCraft.Player},System.String,System.String,System.Object[])">
            <summary> Formats and broadcasts a message, prefixing wrapped lines. </summary>
            <param name="source"> List of players who will receive the message. </param>
            <param name="prefix"> Prefix to prepend to prepend to each line after the 1st,
            if any line-wrapping occurs. Does NOT get prepended to first line. </param>
            <param name="message"> String/message to send. </param>
            <param name="formatArgs"> Format parameters. Same semantics as String.Format </param>
            <returns> Number of players who received the message. </returns>
        </member>
        <member name="M:fCraft.PlayerEnumerable.MessageAlt(System.Collections.Generic.IEnumerable{fCraft.Player},System.String,System.Object[])">
            <summary> Formats and broadcasts a message, showing on top-left for those who use WoM. </summary>
            <param name="source"> List of players who will receive the message. </param>
            <param name="message"> String/message to send. </param>
            <param name="formatArgs"> Format parameters. Same semantics as String.Format </param>
            <returns> Number of players who received the message. </returns>
        </member>
        <member name="M:fCraft.PlayerEnumerable.Send(System.Collections.Generic.IEnumerable{fCraft.Player},fCraft.Packet)">
            <summary> Broadcasts a packet with normal priority. </summary>
            <param name="source"> List of players who will receive the packet. </param>
            <param name="packet"> Packet to send. </param>
            <returns> Number of players who received the packet. </returns>
        </member>
        <member name="M:fCraft.PlayerEnumerable.Send(System.Collections.Generic.IEnumerable{fCraft.Player},fCraft.Player,fCraft.Packet)">
            <summary> Broadcasts a packet with normal priority. </summary>
            <param name="source"> List of players who will receive the packet. </param>
            <param name="except"> Player to exclude from the recepient list. </param>
            <param name="packet"> Packet to send. </param>
            <returns> Number of players who received the packet. </returns>
        </member>
        <member name="M:fCraft.PlayerEnumerable.SendLowPriority(System.Collections.Generic.IEnumerable{fCraft.Player},fCraft.Packet)">
            <summary> Broadcasts a packet with low priority. </summary>
            <param name="source"> List of players who will receive the packet. </param>
            <param name="packet"> Packet to send. </param>
            <returns> Number of players who received the packet. </returns>
        </member>
        <member name="M:fCraft.PlayerEnumerable.SendLowPriority(System.Collections.Generic.IEnumerable{fCraft.Player},fCraft.Player,fCraft.Packet)">
            <summary> Broadcasts a packet with low priority. </summary>
            <param name="source"> List of players who will receive the packet. </param>
            <param name="except"> Player to exclude from the recepient list. </param>
            <param name="packet"> Packet to send. </param>
            <returns> Number of players who received the packet. </returns>
        </member>
        <member name="M:fCraft.Particle.#ctor(fCraft.World,fCraft.Vector3I,fCraft.Vector3F,fCraft.Player,fCraft.Block,fCraft.IParticleBehavior)">
            <summary>
            Initializes a new instance of the <see cref="T:fCraft.Particle"/> class.
            </summary>
            <param name="world">The world.</param>
            <param name="pos">The initial position.</param>
            <param name="direction">The direction in which the particle is flying.</param>
            <param name="owner">The owner of the particle.</param>
            <param name="block">The block type of the particle.</param>
            <param name="behavior">The partcle behavior. Includes how fare and fast it moves, what happens if it hits a player an obstacle etc.</param>
        </member>
        <member name="T:fCraft.MapConversion.MapFCMv3">
            <summary> fCraft map format converter, for format version #3 (2011).
            Soon to be obsoleted by FCMv4. </summary>
        </member>
        <member name="T:fCraft.MaintenanceCommands">
            <summary> Several yet-undocumented commands, mostly related to AutoRank. </summary>
        </member>
        <member name="T:fCraft.AutoRank.Condition">
            <summary> Base class for all AutoRank conditions. </summary>
        </member>
        <member name="T:fCraft.AutoRank.ConditionIntRange">
            <summary> Class for checking ranges of countable PlayerInfo fields (see ConditionField enum). </summary>
        </member>
        <member name="T:fCraft.AutoRank.ConditionRankChangeType">
            <summary> Checks what caused player's last rank change (see RankChangeType enum). </summary>
        </member>
        <member name="T:fCraft.AutoRank.ConditionPreviousRank">
            <summary> Checks what rank the player held previously. </summary>
        </member>
        <member name="T:fCraft.AutoRank.ConditionSet">
            <summary> Base class for condition sets/combinations. </summary>
        </member>
        <member name="T:fCraft.AutoRank.ConditionAND">
            <summary> Logical AND - true if ALL conditions are true. </summary>
        </member>
        <member name="T:fCraft.AutoRank.ConditionNAND">
            <summary> Logical AND - true if NOT ALL of the conditions are true. </summary>
        </member>
        <member name="T:fCraft.AutoRank.ConditionOR">
            <summary> Logical AND - true if ANY of the conditions are true. </summary>
        </member>
        <member name="T:fCraft.AutoRank.ConditionNOR">
            <summary> Logical AND - true if NONE of the conditions are true. </summary>
        </member>
        <member name="T:fCraft.INotifiesOnChange">
            <summary> Simple interface for objects to notify of changes in their serializable state.
            This event is used to trigger saving things like Zone- and MetadataCollection.
            sender should be set for EventHandler, and e should be set to EventArgs.Empty </summary>
        </member>
        <member name="F:fCraft.Zone.Controller">
            <summary> Zone build permission controller. </summary>
        </member>
        <member name="M:fCraft.Zone.Create(fCraft.BoundingBox,fCraft.PlayerInfo)">
            <summary> Creates the zone boundaries, and sets CreatedDate/CreatedBy. </summary>
            <param name="bounds"> New zone boundaries. </param>
            <param name="createdBy"> Player who created this zone. May not be null. </param>
        </member>
        <member name="P:fCraft.Zone.Bounds">
            <summary> Zone boundaries. </summary>
        </member>
        <member name="P:fCraft.Zone.Name">
            <summary> Zone name (case-preserving but case-insensitive). </summary>
        </member>
        <member name="P:fCraft.Zone.ExceptionList">
            <summary> List of exceptions (included and excluded players). </summary>
        </member>
        <member name="P:fCraft.Zone.CreatedDate">
            <summary> Zone creation date, UTC. </summary>
        </member>
        <member name="P:fCraft.Zone.EditedDate">
            <summary> Zone editing date, UTC. </summary>
        </member>
        <member name="P:fCraft.Zone.CreatedBy">
            <summary> Player who created this zone. May be null if unknown. </summary>
        </member>
        <member name="P:fCraft.Zone.EditedBy">
            <summary> Player who was the last to edit this zone. May be null if unknown. </summary>
        </member>
        <member name="P:fCraft.Zone.Map">
            <summary> Map that this zone is on. </summary>
        </member>
        <member name="T:fCraft.MapConversion.MapFCMv2">
            <summary> fCraft map format converter, for obsolete format version #2 (2010). </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:fCraft.Physics.Physics" -->
        <member name="T:fCraft.ZoneCollection">
            <summary> A collection of zones within a map. </summary>
        </member>
        <member name="M:fCraft.ZoneCollection.Add(fCraft.Zone)">
            <summary> Adds a new zone to the collection.
            The name of the zone cannot match existing names. </summary>
        </member>
        <member name="M:fCraft.ZoneCollection.Clear">
            <summary> Removes all zones from the collection. </summary>
        </member>
        <member name="M:fCraft.ZoneCollection.Contains(fCraft.Zone)">
            <summary> Checks whether a given zone is in the collection. </summary>
        </member>
        <member name="M:fCraft.ZoneCollection.Contains(System.String)">
            <summary> Checks whether any zone with a given name is in the collection. </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:fCraft.ZoneCollection.Remove(fCraft.Zone)" -->
        <!-- Badly formed XML comment ignored for member "M:fCraft.ZoneCollection.Remove(System.String)" -->
        <member name="M:fCraft.ZoneCollection.Check(fCraft.Vector3I,fCraft.Player)">
            <summary> Checks how zones affect the given player's ability to affect
            a block at given coordinates. </summary>
            <param name="coords"> Block coordinates. </param>
            <param name="player"> Player to check. </param>
            <returns> None if no zones affect the coordinate.
            Allow if ALL affecting zones allow the player.
            Deny if ANY affecting zone denies the player. </returns>
        </member>
        <member name="M:fCraft.ZoneCollection.CheckDetailed(fCraft.Vector3I,fCraft.Player,fCraft.Zone[]@,fCraft.Zone[]@)">
            <summary> Checks how zones affect the given player's ability to affect
            a block at given coordinates, in detail. </summary>
            <param name="coords"> Block coordinates. </param>
            <param name="player"> Player to check. </param>
            <param name="allowedZones"> Array of zones that allow the player to build. </param>
            <param name="deniedZones"> Array of zones that deny the player from building. </param>
            <returns> True if any zones were found. False if none affect the given coordinate. </returns>
        </member>
        <member name="M:fCraft.ZoneCollection.FindDenied(fCraft.Vector3I,fCraft.Player)">
            <summary> Finds which zone denied player's ability to affect
            a block at given coordinates. Used in conjunction with CheckZones(). </summary>
            <param name="coords"> Block coordinates. </param>
            <param name="player"> Player to check. </param>
            <returns> First zone to deny the player.
            null if none of the zones deny the player. </returns>
        </member>
        <member name="M:fCraft.ZoneCollection.FindExact(System.String)">
            <summary> Finds a zone by name, without using autocompletion.
            Zone names are case-insensitive. </summary>
            <param name="name"> Full zone name. </param>
            <returns> Zone object if it was found.
            null if no Zone with the given name could be found. </returns>
        </member>
        <member name="M:fCraft.ZoneCollection.Find(System.String)">
            <summary> Finds a zone by name, with autocompletion.
            Zone names are case-insensitive.
            Note that this method is a lot slower than FindExact. </summary>
            <param name="name"> Full zone name. </param>
            <returns> Zone object if it was found.
            null if no Zone with the given name could be found. </returns>
        </member>
        <member name="M:fCraft.ZoneCollection.Rename(fCraft.Zone,System.String)">
            <summary> Changes the name of a given zone. </summary>
            <param name="zone"> Zone to rename. </param>
            <param name="newName"> New name to give to the zone. </param>
            <exception cref="T:System.ArgumentException"> Thrown if a zone with a given name already exists. </exception>
        </member>
        <member name="P:fCraft.ZoneCollection.Count">
            <summary> Returns the total number of zones in this collection. </summary>
        </member>
        <member name="T:fCraft.LogRecorder">
            <summary> A simple way to temporarily hook into fCraft's Logger.
            Make sure to dispose this class when you are done recording.
            The easiest way to ensure that is with a using(){...} block. </summary>
        </member>
        <member name="M:fCraft.LogRecorder.#ctor">
            <summary> Creates a recorder for errors and warnings. </summary>
        </member>
        <member name="M:fCraft.LogRecorder.#ctor(System.Boolean,fCraft.LogType[])">
            <summary> Creates a custom recorder. </summary>
            <param name="restrictToThisThread"> Whether this log recorder should limit
            recording to messages emitted from the same thread that created this object. </param>
            <param name="thingsToLog"> A list or array of LogTypes to record. </param>
        </member>
        <member name="M:fCraft.LogRecorder.Dispose">
            <summary> Stops recording the messages (cannot be resumed).
            This method should be called when you are done with the object.
            If LogRecorder is in a using() block, this will be done for you. </summary>
        </member>
        <member name="P:fCraft.LogRecorder.HasMessages">
            <summary> Whether any messages have been recorded. </summary>
        </member>
        <member name="P:fCraft.LogRecorder.HasErrors">
            <summary> Whether any errors have been recorded. </summary>
        </member>
        <member name="P:fCraft.LogRecorder.HasWarnings">
            <summary> Whether any errors have been recorded. </summary>
        </member>
        <member name="P:fCraft.LogRecorder.MessageList">
            <summary> An array of individual recorded messages. </summary>
        </member>
        <member name="P:fCraft.LogRecorder.MessageString">
            <summary> All messages in one block of text, separated by newlines. </summary>
        </member>
        <member name="T:fCraft.OpCode">
            <summary> Minecraft protocol's opcodes. </summary>
        </member>
        <member name="T:fCraft.Command">
            <summary> A text scanner that aids parsing chat commands and their arguments.
            Breaks up a message into tokens at spaces. Treats quoted strings as whole tokens. </summary>
        </member>
        <member name="M:fCraft.Command.#ctor(fCraft.Command)">
            <summary> Creates a copy of an existing command. </summary>
        </member>
        <member name="M:fCraft.Command.#ctor(System.String)">
            <summary> Creates a command from a raw message. </summary>
        </member>
        <member name="M:fCraft.Command.Clone">
            <summary> Creates a copy of this command.
            Use the copy constructor instead of this, if possible. </summary>
        </member>
        <member name="M:fCraft.Command.Next">
            <summary> Returns the next command argument.
            A single "argument" is either a word that ends with whitespace,
            or several words in double quotes (""). </summary>
            <returns> Next argument (string), or null if there are no more arguments. </returns>
        </member>
        <member name="M:fCraft.Command.NextInt(System.Int32@)">
            <summary> Returns the next command argument, parsed as an integer. </summary>
            <param name="number"> Set to the argument's value if parsing succeeded,
            or zero if parsing failed or if there are no more arguments. </param>
            <returns> Returns true if parsing succeeded,
            and false if parsing failed or if there are no more arguments. </returns>
        </member>
        <member name="M:fCraft.Command.NextAll">
            <summary> Returns the rest of command's text, from current offset to the end of string.
            If there is nothing to return (i.e. if string ends at the current offset),
            returns empty string. </summary>
            <returns> The rest of the command, or an empty string. </returns>
        </member>
        <member name="M:fCraft.Command.Rewind">
            <summary> Resets the argument offset.
            After calling Rewind, arguments can be read from the beginning again. </summary>
        </member>
        <member name="P:fCraft.Command.HasNext">
            <summary> Checks whether there is another argument available.
            Does not modify the offset. </summary>
        </member>
        <member name="P:fCraft.Command.HasInt">
            <summary> Checks whether there there is an int argument available.
            Does not modify the offset. </summary>
        </member>
        <member name="P:fCraft.Command.CountRemaining">
            <summary> Counts the number of arguments left in this command.
            Does not modify the offset. </summary>
        </member>
        <member name="P:fCraft.Command.Count">
            <summary> Counts the total number of arguments.
            Does not modify the offset. </summary>
        </member>
        <member name="T:fCraft.BuildingCommands">
            <summary> Commands for placing specific blocks (solid, water, grass),
            and switching block placement modes (paint, bind). </summary>
        </member>
        <member name="T:fCraft.CommandHandler">
            <summary> Delegate for command handlers/callbacks. </summary>
            <param name="source"> Player who called the command. </param>
            <param name="cmd"> Command arguments. </param>
        </member>
        <member name="T:fCraft.CommandDescriptor">
            <summary> Describes a chat command. Defines properties, permission requirements, and usage information.
            Specifies a handler method. </summary>
        </member>
        <member name="M:fCraft.CommandDescriptor.CanBeCalledBy(fCraft.Rank)">
            <summary> Checks whether this command may be called by players of a given rank. </summary>
        </member>
        <member name="M:fCraft.CommandDescriptor.IsVisibleTo(fCraft.Rank)">
            <summary> Checks whether players of the given rank should see this command in /cmds list.
            Takes permissions and the hidden flag into account. </summary>
        </member>
        <member name="M:fCraft.CommandDescriptor.PrintUsage(fCraft.Player)">
            <summary> Prints command usage syntax to the given player. </summary>
        </member>
        <member name="M:fCraft.CommandDescriptor.Call(fCraft.Player,fCraft.Command,System.Boolean)">
            <summary> Calls this command. </summary>
            <param name="player"> Player who called the command. </param>
            <param name="cmd"> Command arguments. </param>
            <param name="raiseEvent"> Whether CommandCalling and CommandCalled events should be raised. </param>
            <returns> True if the command was called succesfully.
            False if the call was cancelled by the CommandCalling event. </returns>
        </member>
        <member name="P:fCraft.CommandDescriptor.Aliases">
            <summary> List of aliases. May be null or empty. Default: null </summary>
        </member>
        <member name="P:fCraft.CommandDescriptor.Category">
            <summary> Command category. Must be set before registering. </summary>
        </member>
        <member name="P:fCraft.CommandDescriptor.IsConsoleSafe">
            <summary> Whether the command may be used from console. Default: false </summary>
        </member>
        <member name="P:fCraft.CommandDescriptor.Handler">
            <summary> Callback function to execute when command is called. Must be set before registering. </summary>
        </member>
        <member name="P:fCraft.CommandDescriptor.Help">
            <summary> Full text of the help message. Default: null </summary>
        </member>
        <member name="P:fCraft.CommandDescriptor.IsHidden">
            <summary> Whether the command is hidden from command list (/cmds). Default: false </summary>
        </member>
        <member name="P:fCraft.CommandDescriptor.IsCustom">
            <summary> Whether the command is not part of fCraft core (set automatically). </summary>
        </member>
        <member name="P:fCraft.CommandDescriptor.NotRepeatable">
            <summary> Whether the command should be repeated by the "/" shortcut. Default: false </summary>
        </member>
        <member name="P:fCraft.CommandDescriptor.UsableByFrozenPlayers">
            <summary> Whether the command should be usable by frozen players. Default: false </summary>
        </member>
        <member name="P:fCraft.CommandDescriptor.DisableLogging">
            <summary> Whether calls to this command should not be logged. </summary>
        </member>
        <member name="P:fCraft.CommandDescriptor.Name">
            <summary> Primary command name. Must be set before registering. </summary>
        </member>
        <member name="P:fCraft.CommandDescriptor.Permissions">
            <summary> List of permissions required to call the command. May be empty or null. Default: null </summary>
        </member>
        <member name="P:fCraft.CommandDescriptor.AnyPermission">
            <summary> Whether any permission from the list is enough.
            If this is false, ALL permissions are required. </summary>
        </member>
        <member name="P:fCraft.CommandDescriptor.Usage">
            <summary> Brief demonstration of command's usage syntax. Defaults to "/Name". </summary>
        </member>
        <member name="P:fCraft.CommandDescriptor.HelpSections">
            <summary> Help sub-sections. </summary>
        </member>
        <member name="P:fCraft.CommandDescriptor.RepeatableSelection">
            <summary> Whether this command involves a selection that can be repeated with /static. Default: false </summary>
        </member>
        <member name="T:fCraft.BlockDBEntry">
            <summary> Struct representing a single block change.
            You may safely cast byte* pointers directly to BlockDBEntry* and vice versa. </summary>
        </member>
        <member name="F:fCraft.BlockDBEntry.Timestamp">
            <summary> UTC Unix timestamp of the change. </summary>
        </member>
        <member name="F:fCraft.BlockDBEntry.PlayerID">
            <summary> Numeric PlayerDB id of the player who made the change. </summary>
        </member>
        <member name="F:fCraft.BlockDBEntry.X">
            <summary> X coordinate (horizontal), in terms of blocks. </summary>
        </member>
        <member name="F:fCraft.BlockDBEntry.Y">
            <summary> Y coordinate (horizontal), in terms of blocks. </summary>
        </member>
        <member name="F:fCraft.BlockDBEntry.Z">
            <summary> Z coordinate (vertical), in terms of blocks. </summary>
        </member>
        <member name="F:fCraft.BlockDBEntry.OldBlock">
            <summary> Block that previously occupied this coordinate </summary>
        </member>
        <member name="F:fCraft.BlockDBEntry.NewBlock">
            <summary> Block that now occupies this coordinate </summary>
        </member>
        <member name="F:fCraft.BlockDBEntry.Context">
            <summary> Context for this block change. </summary>
        </member>
        <member name="P:fCraft.BlockDBEntry.Coord">
            <summary> Change's (X,Y,Z) coordinates as a vector. </summary>
        </member>
        <member name="T:System.IO.Compression.ZipStorer">
            <summary>
            Unique class for compression/decompression file. Represents a Zip file.
            </summary>
        </member>
        <member name="M:System.IO.Compression.ZipStorer.Create(System.String,System.String)">
            <summary> Method to create a new storage file. </summary>
            <param name="filename">Full path of Zip file to create</param>
            <param name="fileComment">General comment for Zip file</param>
            <returns>A valid ZipStorer object</returns>
        </member>
        <member name="M:System.IO.Compression.ZipStorer.Create(System.IO.Stream,System.String)">
            <summary>
            Method to create a new zip storage in a stream
            </summary>
            <param name="stream"></param>
            <param name="fileComment"></param>
            <returns>A valid ZipStorer object</returns>
        </member>
        <member name="M:System.IO.Compression.ZipStorer.Open(System.String,System.IO.FileAccess)">
            <summary>
            Method to open an existing storage file
            </summary>
            <param name="filename">Full path of Zip file to open</param>
            <param name="fileAccess">File access mode as used in FileStream constructor</param>
            <returns>A valid ZipStorer object</returns>
        </member>
        <member name="M:System.IO.Compression.ZipStorer.Open(System.IO.Stream,System.IO.FileAccess)">
            <summary>
            Method to open an existing storage from stream
            </summary>
            <param name="stream">Already opened stream with zip contents</param>
            <param name="fileFileAccess">File access mode for stream operations</param>
            <returns>A valid ZipStorer object</returns>
        </member>
        <member name="M:System.IO.Compression.ZipStorer.AddFile(System.IO.Compression.ZipStorer.Compression,System.String,System.String,System.String)">
            <summary>
            Add full contents of a file into the Zip storage
            </summary>
            <param name="method">Compression method</param>
            <param name="pathname">Full path of file to add to Zip storage</param>
            <param name="filenameInZip">Filename and path as desired in Zip directory</param>
            <param name="fileComment">Comment for stored file</param>        
        </member>
        <member name="M:System.IO.Compression.ZipStorer.AddStream(System.IO.Compression.ZipStorer.Compression,System.String,System.IO.Stream,System.DateTime,System.String)">
            <summary>
            Add full contents of a stream into the Zip storage
            </summary>
            <param name="method">Compression method</param>
            <param name="filenameInZip">Filename and path as desired in Zip directory</param>
            <param name="source">Stream object containing the data to store in Zip</param>
            <param name="modTime">Modification time of the data to store</param>
            <param name="fileComment">Comment for stored file</param>
        </member>
        <member name="M:System.IO.Compression.ZipStorer.Close">
            <summary>
            Updates central directory (if pertinent) and close the Zip storage
            </summary>
            <remarks>This is a required step, unless automatic dispose is used</remarks>
        </member>
        <member name="M:System.IO.Compression.ZipStorer.ReadCentralDir">
            <summary>
            Read all the file records in the central directory 
            </summary>
            <returns>List of all entries in directory</returns>
        </member>
        <member name="M:System.IO.Compression.ZipStorer.ExtractFile(System.IO.Compression.ZipStorer.ZipFileEntry,System.String)">
            <summary>
            Copy the contents of a stored file into a physical file
            </summary>
            <param name="zfe">Entry information of file to extract</param>
            <param name="filename">Name of file to store uncompressed data</param>
            <returns>True if success, false if not.</returns>
            <remarks>Unique compression methods are Store and Deflate</remarks>
        </member>
        <member name="M:System.IO.Compression.ZipStorer.ExtractFile(System.IO.Compression.ZipStorer.ZipFileEntry,System.IO.Stream)">
            <summary> Copy the contents of a stored file into an opened stream </summary>
            <param name="zfe">Entry information of file to extract</param>
            <param name="stream">Stream to store the uncompressed data</param>
            <returns>True if success, false if not.</returns>
            <remarks>Unique compression methods are Store and Deflate</remarks>
        </member>
        <member name="M:System.IO.Compression.ZipStorer.RemoveEntries(System.IO.Compression.ZipStorer@,System.Collections.Generic.List{System.IO.Compression.ZipStorer.ZipFileEntry})">
            <summary>
            Removes one of many files in storage. It creates a new Zip file.
            </summary>
            <param name="zip">Reference to the current Zip object</param>
            <param name="zfes">List of Entries to remove from storage</param>
            <returns>True if success, false if not</returns>
            <remarks>This method only works for storage of type FileStream</remarks>
        </member>
        <member name="M:System.IO.Compression.ZipStorer.Dispose">
            <summary>
            Closes the Zip file stream
            </summary>
        </member>
        <member name="P:System.IO.Compression.ZipStorer.EncodeUTF8">
            <summary>True if UTF8 encoding for filename and comments, false if default (CP 437)</summary>
        </member>
        <member name="P:System.IO.Compression.ZipStorer.ForceDeflating">
            <summary>Force deflate algotithm even if it inflates the stored file. Off by default.</summary>
        </member>
        <member name="T:System.IO.Compression.ZipStorer.Compression">
            <summary> Compression method enumeration. </summary>
        </member>
        <member name="F:System.IO.Compression.ZipStorer.Compression.Store">
            <summary>Uncompressed storage</summary> 
        </member>
        <member name="F:System.IO.Compression.ZipStorer.Compression.Deflate">
            <summary>Deflate compression method</summary>
        </member>
        <member name="T:System.IO.Compression.ZipStorer.ZipFileEntry">
            <summary> Represents an entry in Zip file directory. </summary>
        </member>
        <member name="F:System.IO.Compression.ZipStorer.ZipFileEntry.Method">
            <summary>Compression method</summary>
        </member>
        <member name="F:System.IO.Compression.ZipStorer.ZipFileEntry.FilenameInZip">
            <summary>Full path and filename as stored in Zip</summary>
        </member>
        <member name="F:System.IO.Compression.ZipStorer.ZipFileEntry.FileSize">
            <summary>Original file size</summary>
        </member>
        <member name="F:System.IO.Compression.ZipStorer.ZipFileEntry.CompressedSize">
            <summary>Compressed file size</summary>
        </member>
        <member name="F:System.IO.Compression.ZipStorer.ZipFileEntry.HeaderOffset">
            <summary>Offset of header information inside Zip storage</summary>
        </member>
        <member name="F:System.IO.Compression.ZipStorer.ZipFileEntry.FileOffset">
            <summary>Offset of file inside Zip storage</summary>
        </member>
        <member name="F:System.IO.Compression.ZipStorer.ZipFileEntry.HeaderSize">
            <summary>Size of header information</summary>
        </member>
        <member name="F:System.IO.Compression.ZipStorer.ZipFileEntry.Crc32">
            <summary>32-bit checksum of entire file</summary>
        </member>
        <member name="F:System.IO.Compression.ZipStorer.ZipFileEntry.ModifyTime">
            <summary>Last modification time of file</summary>
        </member>
        <member name="F:System.IO.Compression.ZipStorer.ZipFileEntry.Comment">
            <summary>User comment for file</summary>
        </member>
        <member name="F:System.IO.Compression.ZipStorer.ZipFileEntry.EncodeUTF8">
            <summary>True if UTF8 encoding for filename and comments, false if default (CP 437)</summary>
        </member>
        <member name="M:System.IO.Compression.ZipStorer.ZipFileEntry.ToString">
            <summary>Overridden method</summary>
            <returns>Filename in Zip</returns>
        </member>
        <member name="M:fCraft.IPAddressUtil.IsLAN(System.Net.IPAddress)">
            <summary> Checks whether an IP address may belong to LAN (192.168.0.0/16 or 10.0.0.0/24). </summary>
        </member>
        <member name="M:fCraft.DateTimeUtil.ToUnixTime(System.DateTime)">
            <summary> Converts a DateTime to Utc Unix Timestamp. </summary>
        </member>
        <member name="M:fCraft.DateTimeUtil.ToUnixTimeString(System.DateTime)">
            <summary> Converts a DateTime to a string containing the Utc Unix Timestamp.
            If the date equals DateTime.MinValue, returns an empty string. </summary>
        </member>
        <member name="M:fCraft.DateTimeUtil.ToUnixTimeString(System.DateTime,System.Text.StringBuilder)">
            <summary> Appends a Utc Unix Timestamp to the given StringBuilder.
            If the date equals DateTime.MinValue, nothing is appended. </summary>
        </member>
        <member name="M:fCraft.DateTimeUtil.ToDateTime(System.Int64)">
            <summary> Creates a DateTime from a Utc Unix Timestamp. </summary>
        </member>
        <member name="M:fCraft.DateTimeUtil.ToDateTime(System.String,System.DateTime@)">
            <summary> Tries to create a DateTime from a string containing a Utc Unix Timestamp.
            If the string was empty, returns false and does not affect result. </summary>
        </member>
        <member name="M:fCraft.DateTimeUtil.ToTickString(System.TimeSpan)">
            <summary> Converts a TimeSpan to a string containing the number of seconds.
            If the timestamp is zero seconds, returns an empty string. </summary>
        </member>
        <member name="M:fCraft.DateTimeUtil.ToTimeSpan(System.String,System.TimeSpan@)">
            <summary> Tries to create a TimeSpan from a string containing the number of seconds.
            If the string was empty, returns false and sets result to TimeSpan.Zero </summary>
        </member>
        <member name="M:fCraft.DateTimeUtil.TryParseLocalDate(System.String,System.DateTime@)">
            <summary> Tries to parse a data in a culture-specific ways.
            This method is, unfortunately, necessary because in versions 0.520-0.522,
            fCraft saved dates in a culture-specific format. This means that if the
            server's culture settings were changed, or if the PlayerDB and IPBanList
            files were moved between machines, all dates became unparseable. </summary>
            <param name="dateString"> String to parse. </param>
            <param name="date"> Date to output. </param>
            <returns> True if date string could be parsed and was not empty/MinValue. </returns>
        </member>
        <member name="M:fCraft.EnumerableUtil.JoinToString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary> Joins all items in a collection into one comma-separated string.
            If the items are not strings, .ToString() is called on them. </summary>
        </member>
        <member name="M:fCraft.EnumerableUtil.JoinToString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary> Joins all items in a collection into one string separated with the given separator.
            If the items are not strings, .ToString() is called on them. </summary>
        </member>
        <member name="M:fCraft.EnumerableUtil.JoinToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary> Joins all items in a collection into one string separated with the given separator.
            A specified string conversion function is called on each item before contactenation. </summary>
        </member>
        <member name="M:fCraft.EnumerableUtil.JoinToString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.String})">
            <summary> Joins all items in a collection into one string separated with the given separator.
            A specified string conversion function is called on each item before contactenation. </summary>
        </member>
        <member name="M:fCraft.EnumerableUtil.JoinToClassyString(System.Collections.Generic.IEnumerable{fCraft.IClassy})">
            <summary> Joins formatted names of all IClassy objects in a collection into one comma-separated string. </summary>
        </member>
        <member name="T:fCraft.MapGenTheme">
            <summary> Map generator themes. A theme defines what type of blocks are used to fill the map. </summary>
        </member>
        <member name="T:fCraft.MapGenTemplate">
            <summary> Map generator template. Templates define landscape shapes and features. </summary>
        </member>
        <member name="T:fCraft.BlockUpdate">
            <summary> Structure representing a pending update to the map's block array.
            Contains information about the block coordinates, type, and change's origin. </summary>
        </member>
        <member name="T:fCraft.PlayerProximityTracker">
            <summary>
            Not thread safe.
            </summary>
        </member>
        <member name="T:fCraft.PlayerDB">
            <summary> Persistent database of player information. </summary>
        </member>
        <member name="M:fCraft.PlayerDB.FindPlayerInfo(System.String,fCraft.PlayerInfo@)">
            <summary>Searches for player names starting with namePart, returning just one or none of the matches.</summary>
            <param name="namePart">Partial or full player name</param>
            <param name="info">PlayerInfo to output (will be set to null if no single match was found)</param>
            <returns>true if one or zero matches were found, false if multiple matches were found</returns>
        </member>
        <member name="M:fCraft.PlayerDB.FindPlayerInfoByID(System.Int32)">
            <summary> Finds PlayerInfo by ID. Returns null of not found. </summary>
        </member>
        <member name="P:fCraft.PlayerDB.PlayerInfoList">
            <summary> Cached list of all players in the database.
            May be quite long. Make sure to copy a reference to
            the list before accessing it in a loop, since this 
            array be frequently be replaced by an updated one. </summary>
        </member>
        <member name="T:fCraft.Permission">
            <summary> Enumeration of permission types/categories.
            Every rank definition contains a combination of these. </summary>
        </member>
        <member name="F:fCraft.Permission.Chat">
            <summary> Ability to chat and to PM players.
            Note that players without this permission can still
            type in commands, receive PMs, and read chat. </summary>
        </member>
        <member name="F:fCraft.Permission.Build">
            <summary> Ability to place blocks on maps.
            This is a baseline permission that can be overridden by
            world-specific and zone-specific permissions. </summary>
        </member>
        <member name="F:fCraft.Permission.Delete">
            <summary> Ability to delete or replace blocks on maps.
            This is a baseline permission that can be overridden by
            world-specific and zone-specific permissions. </summary>
        </member>
        <member name="F:fCraft.Permission.PlaceGrass">
            <summary> Ability to place grass blocks. </summary>
        </member>
        <member name="F:fCraft.Permission.PlaceWater">
            <summary> Ability to place water blocks. </summary>
        </member>
        <member name="F:fCraft.Permission.PlaceLava">
            <summary> Ability to place lava blocks. </summary>
        </member>
        <member name="F:fCraft.Permission.PlaceAdmincrete">
            <summary> Ability to build admincrete. </summary>
        </member>
        <member name="F:fCraft.Permission.DeleteAdmincrete">
            <summary> Ability to delete or replace admincrete. </summary>
        </member>
        <member name="F:fCraft.Permission.ViewOthersInfo">
            <summary> Ability to view extended information about other players. </summary>
        </member>
        <member name="F:fCraft.Permission.ViewPlayerIPs">
            <summary> Ability to see any players' IP addresses. </summary>
        </member>
        <member name="F:fCraft.Permission.EditPlayerDB">
            <summary> Ability to edit the player database directly.
            This also adds the ability to promote/demote/ban players by name,
            even if they have not visited the server yet. Also allows to
            manipulate players' records, and to promote/demote players in batches. </summary>
        </member>
        <member name="F:fCraft.Permission.Say">
            <summary> Ability to use /Say command. </summary>
        </member>
        <member name="F:fCraft.Permission.ReadStaffChat">
            <summary> Ability to read /Staff chat. </summary>
        </member>
        <member name="F:fCraft.Permission.UseColorCodes">
            <summary> Ability to use color codes in chat messages. </summary>
        </member>
        <member name="F:fCraft.Permission.UseSpeedHack">
            <summary> Ability to move at a faster-than-normal rate (using hacks). </summary>
        </member>
        <member name="F:fCraft.Permission.Kick">
            <summary> Ability to kick players from the server. </summary>
        </member>
        <member name="F:fCraft.Permission.Ban">
            <summary> Ability to ban/unban individual players from the server. </summary>
        </member>
        <member name="F:fCraft.Permission.BanIP">
            <summary> Ability to ban/unban IP addresses from the server. </summary>
        </member>
        <member name="F:fCraft.Permission.BanAll">
            <summary> Ability to ban/unban a player account, his IP, and all other
            accounts that used the IP. BanAll/UnbanAll commands can be used
            on players who keep evading bans. </summary>
        </member>
        <member name="F:fCraft.Permission.Promote">
            <summary> Ability to promote players to a higher rank. </summary>
        </member>
        <member name="F:fCraft.Permission.Demote">
            <summary> Ability to demote players to a lower rank. </summary>
        </member>
        <member name="F:fCraft.Permission.Hide">
            <summary> Ability to appear hidden from other players. You can still chat,
            build/delete blocks, use all commands, and join worlds while hidden.
            Hidden players are completely invisible to other players. </summary>
        </member>
        <member name="F:fCraft.Permission.Draw">
            <summary> Ability to use drawing tools (commands capable of affecting
            many blocks at once). This permission can be overridden by world-specific
            and zone-specific building permissions. </summary>
        </member>
        <member name="F:fCraft.Permission.DrawAdvanced">
            <summary> Ability to use advanced draw commands: sphere, torus, brushes. </summary>
        </member>
        <member name="F:fCraft.Permission.Tree">
            <summary> Ability to draw trees of any height and shape. </summary>
        </member>
        <member name="F:fCraft.Permission.CopyAndPaste">
            <summary> Ability to copy (or cut) and paste blocks. The total number of
            blocks that can be copied or pasted at a time is affected by the draw limit. </summary>
        </member>
        <member name="F:fCraft.Permission.UndoOthersActions">
            <summary> Ability to undo actions of other players (UndoArea and UndoPlayer). </summary>
        </member>
        <member name="F:fCraft.Permission.Teleport">
            <summary> Ability to teleport to other players. </summary>
        </member>
        <member name="F:fCraft.Permission.Bring">
            <summary> Ability to bring/summon other players to your location,
            or to another player. </summary>
        </member>
        <member name="F:fCraft.Permission.BringAll">
            <summary> Ability to bring/summon many players at a time. </summary>
        </member>
        <member name="F:fCraft.Permission.Patrol">
            <summary> Ability to patrol lower-ranked players.
            "Patrolling" means teleporting to other players to check on them,
            usually while hidden. </summary>
        </member>
        <member name="F:fCraft.Permission.Spectate">
            <summary> Ability to use /Spectate. </summary>
        </member>
        <member name="F:fCraft.Permission.Freeze">
            <summary> Ability to freeze/unfreeze players.
            Frozen players cannot move or build/delete. </summary>
        </member>
        <member name="F:fCraft.Permission.Mute">
            <summary> Ability to temporarily mute players.
            Muted players cannot write chat messages or send PMs,
            but they can still type in commands, receive PMs, and read chat. </summary>
        </member>
        <member name="F:fCraft.Permission.SetSpawn">
            <summary> Ability to change the spawn point of a world or a player. </summary>
        </member>
        <member name="F:fCraft.Permission.Lock">
            <summary> Ability to lock/unlock maps.
            "Locking" a map puts it into a protected read-only state. </summary>
        </member>
        <member name="F:fCraft.Permission.ManageZones">
            <summary> Ability to manipulate zones: adding, editing,
            renaming, and removing zones. </summary>
        </member>
        <member name="F:fCraft.Permission.ManageWorlds">
            <summary> Ability to manipulate the world list:
            adding, renaming, and deleting worlds, loading/saving maps,
            changing per-world permissions, and using the map generator. </summary>
        </member>
        <member name="F:fCraft.Permission.ManageBlockDB">
            <summary> Ability to enable/disable, clear, and configure BlockDB. </summary>
        </member>
        <member name="F:fCraft.Permission.Import">
            <summary> Ability to import rank and ban lists from files.
            Useful if you are switching from another server software. </summary>
        </member>
        <member name="F:fCraft.Permission.ReloadConfig">
            <summary> Ability to reload the configuration file without restarting. </summary>
        </member>
        <member name="F:fCraft.Permission.ShutdownServer">
            <summary> Ability to shut down or restart the server remotely.
            Useful for servers that run on dedicated machines. </summary>
        </member>
        <member name="F:fCraft.Permission.ManagePortal">
            <summary> Ability to create or delete a portal. </summary>
        </member>
        <member name="F:fCraft.Permission.HighFive">
            <summary> Ability to high five someone. </summary>
        </member>
        <member name="F:fCraft.Permission.ChatWithCaps">
            <summary> Ability to chat in capital letters. </summary>
        </member>
        <member name="F:fCraft.Permission.Swear">
            <summary> Ability to swear. </summary>
        </member>
        <member name="F:fCraft.Permission.MakeVotes">
            <summary> Ability to Make votes in /vote </summary>
        </member>
        <member name="F:fCraft.Permission.MakeVoteKicks">
            <summary> Ability to start VoteKicks in /vote kick</summary>
        </member>
        <member name="F:fCraft.Permission.BroMode">
            <summary> Ability to start bromode. </summary>
        </member>
        <member name="F:fCraft.Permission.Troll">
            <summary> Ability to impersonate other players (Power Abusable Tool). </summary>
        </member>
        <member name="F:fCraft.Permission.HideRanks">
            <summary> Ability to hide selected ranks. </summary>
        </member>
        <member name="F:fCraft.Permission.ReadAdminChat">
            <summary> Ability to read admin chat. </summary>
        </member>
        <member name="F:fCraft.Permission.ReadCustomChat">
            <summary> Ability to read from the custom chat channel. </summary>
        </member>
        <member name="F:fCraft.Permission.Realm">
            <summary> Ability to use realms. </summary>
        </member>
        <member name="F:fCraft.Permission.Possess">
            <summary> Ability to possess other players. </summary>
        </member>
        <member name="F:fCraft.Permission.Gtfo">
            <summary> Ability to manually disconnect other players. </summary>
        </member>
        <member name="F:fCraft.Permission.RageQuit">
            <summary> Ability to Ragequit from the server. </summary>
        </member>
        <member name="F:fCraft.Permission.Tower">
            <summary> Ability to tower safely with invisible water towers that cannot harm builds. </summary>
        </member>
        <member name="F:fCraft.Permission.TempBan">
            <summary> Ability to tempban. </summary>
        </member>
        <member name="F:fCraft.Permission.Warn">
            <summary> Ability to warn other players. </summary>
        </member>
        <member name="F:fCraft.Permission.Slap">
            <summary> Ability to slap players to the sky. </summary>
        </member>
        <member name="F:fCraft.Permission.Kill">
            <summary> Ability to kill other players. </summary>
        </member>
        <member name="F:fCraft.Permission.Basscannon">
            <summary> Ability to blast players out of the server (kick). </summary>
        </member>
        <member name="F:fCraft.Permission.Physics">
            <summary> Ability to turn physics on and off. </summary>
        </member>
        <member name="F:fCraft.Permission.Fireworks">
            <summary> Ability to turn turn firework mode on/off. </summary>
        </member>
        <member name="F:fCraft.Permission.Gun">
            <summary> Ability to use the /Gun for killing, exploding TNT and Portals. </summary>
        </member>
        <member name="F:fCraft.Permission.Games">
            <summary> Ability to use the manage game modes. </summary>
        </member>
        <member name="F:fCraft.Permission.Moderation">
            <summary> Permission to create a server-wide silence, muting all players, and to voice players while the moderation is in affect. </summary>
        </member>
        <member name="F:fCraft.Permission.Immortal">
            <summary> Allows a player to become immortal, immune to all damage </summary>
        </member>
        <member name="T:fCraft.Chat">
            <summary> Helper class for handling player-generated chat. </summary>
        </member>
        <member name="M:fCraft.Chat.SendGlobal(fCraft.Player,System.String)">
            <summary> Sends a global (white) chat. </summary>
            <param name="player"> Player writing the message. </param>
            <param name="rawMessage"> Message text. </param>
            <returns> True if message was sent, false if it was cancelled by an event callback. </returns>
        </member>
        <member name="M:fCraft.Chat.SendMe(fCraft.Player,System.String)">
            <summary> Sends an action message (/Me). </summary>
            <param name="player"> Player writing the message. </param>
            <param name="rawMessage"> Message text. </param>
            <returns> True if message was sent, false if it was cancelled by an event callback. </returns>
        </member>
        <member name="M:fCraft.Chat.SendPM(fCraft.Player,fCraft.Player,System.String)">
            <summary> Sends a private message (PM). Does NOT send a copy of the message to the sender. </summary>
            <param name="from"> Sender player. </param>
            <param name="to"> Recepient player. </param>
            <param name="rawMessage"> Message text. </param>
            <returns> True if message was sent, false if it was cancelled by an event callback. </returns>
        </member>
        <member name="M:fCraft.Chat.SendRank(fCraft.Player,fCraft.Rank,System.String)">
            <summary> Sends a rank-wide message (@@Rank message). </summary>
            <param name="player"> Player writing the message. </param>
            <param name="rank"> Target rank. </param>
            <param name="rawMessage"> Message text. </param>
            <returns> True if message was sent, false if it was cancelled by an event callback. </returns>
        </member>
        <member name="M:fCraft.Chat.SendSay(fCraft.Player,System.String)">
            <summary> Sends a global announcement (/Say). </summary>
            <param name="player"> Player writing the message. </param>
            <param name="rawMessage"> Message text. </param>
            <returns> True if message was sent, false if it was cancelled by an event callback. </returns>
        </member>
        <member name="M:fCraft.Chat.SendStaff(fCraft.Player,System.String)">
            <summary> Sends a staff message (/Staff). </summary>
            <param name="player"> Player writing the message. </param>
            <param name="rawMessage"> Message text. </param>
            <returns> True if message was sent, false if it was cancelled by an event callback. </returns>
        </member>
        <member name="M:fCraft.Chat.ContainsInvalidChars(System.String)">
            <summary> Checks for unprintable or illegal characters in a message. </summary>
            <param name="message"> Message to check. </param>
            <returns> True if message contains invalid chars. False if message is clean. </returns>
        </member>
        <member name="M:fCraft.Chat.GetRawMessageType(System.String)">
            <summary> Determines the type of player-supplies message based on its syntax. </summary>
        </member>
        <member name="E:fCraft.Chat.Sending">
            <summary> Occurs when a chat message is about to be sent. Cancellable. </summary>
        </member>
        <member name="E:fCraft.Chat.Sent">
            <summary> Occurs after a chat message has been sent. </summary>
        </member>
        <member name="T:fCraft.RawMessageType">
            <summary> Type of message sent by the player. Determined by CommandManager.GetMessageType() </summary>
        </member>
        <member name="F:fCraft.RawMessageType.Invalid">
            <summary> Unparseable chat syntax (rare). </summary>
        </member>
        <member name="F:fCraft.RawMessageType.Chat">
            <summary> Normal (white) chat. </summary>
        </member>
        <member name="F:fCraft.RawMessageType.Command">
            <summary> Command. </summary>
        </member>
        <member name="F:fCraft.RawMessageType.Confirmation">
            <summary> Confirmation (/ok) for a previous command. </summary>
        </member>
        <member name="F:fCraft.RawMessageType.PartialMessage">
            <summary> Partial message (ends with " /"). </summary>
        </member>
        <member name="F:fCraft.RawMessageType.PrivateChat">
            <summary> Private message. </summary>
        </member>
        <member name="F:fCraft.RawMessageType.RankChat">
            <summary> Rank chat. </summary>
        </member>
        <member name="F:fCraft.RawMessageType.RepeatCommand">
            <summary> Repeat of the last command ("/"). </summary>
        </member>
        <member name="T:fCraft.InfoCommands">
            <summary> Contains commands that don't do anything besides displaying some information or text.
            Includes several chat commands. </summary>
        </member>
        <member name="T:fCraft.Portals.PortalRange">
            <summary>
            Class used for rapid check if user is in range of portal
            </summary>
        </member>
        <member name="T:fCraft.MapConversion.MapFormatException">
            <summary> Exception caused by problems with the map file's incorrect format or structure. </summary>
        </member>
        <member name="F:fCraft.Map.Width">
            <summary> Map width, in blocks. Equivalent to Notch's X (horizontal). </summary>
        </member>
        <member name="F:fCraft.Map.Length">
            <summary> Map length, in blocks. Equivalent to Notch's Z (horizontal). </summary>
        </member>
        <member name="F:fCraft.Map.Height">
            <summary> Map height, in blocks. Equivalent to Notch's Y (vertical). </summary>
        </member>
        <member name="F:fCraft.Map.Bounds">
            <summary> Map boundaries. Can be useful for calculating volume or interesections. </summary>
        </member>
        <member name="F:fCraft.Map.Volume">
            <summary> Map volume, in terms of blocks. </summary>
        </member>
        <member name="F:fCraft.Map.spawn">
            <summary> Default spawning point on the map. </summary>
        </member>
        <member name="M:fCraft.Map.ResetSpawn">
            <summary> Resets spawn to the default location (top center of the map). </summary>
        </member>
        <member name="F:fCraft.Map.Blocks">
            <summary> Array of map blocks.
            Use Index(x,y,h) to convert coordinates to array indices.
            Use QueueUpdate() for working on live maps to
            ensure that all players get updated. </summary>
        </member>
        <member name="M:fCraft.Map.#ctor(fCraft.World,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary> Creates an empty new map of given dimensions.
            Dimensions cannot be changed after creation. </summary>
            <param name="world"> World that owns this map. May be null, and may be changed later. </param>
            <param name="width"> Width (horizontal, Notch's X). </param>
            <param name="length"> Length (horizontal, Notch's Z). </param>
            <param name="height"> Height (vertical, Notch's Y). </param>
            <param name="initBlockArray"> If true, the Blocks array will be created. </param>
        </member>
        <member name="M:fCraft.Map.Save(System.String)">
            <summary> Saves this map to a file in the default format (FCMv3). </summary>
            <returns> Whether the saving succeeded. </returns>
        </member>
        <member name="M:fCraft.Map.Index(System.Int32,System.Int32,System.Int32)">
            <summary> Converts given coordinates to a block array index. </summary>
            <param name="x"> X coordinate (width). </param>
            <param name="y"> Y coordinate (length, Notch's Z). </param>
            <param name="z"> Z coordinate (height, Notch's Y). </param>
            <returns> Index of the block in Map.Blocks array. </returns>
        </member>
        <member name="M:fCraft.Map.Index(fCraft.Vector3I)">
            <summary> Converts given coordinates to a block array index. </summary>
            <param name="coords"> Coordinate vector (X,Y,Z). </param>
            <returns> Index of the block in Map.Blocks array. </returns>
        </member>
        <member name="M:fCraft.Map.SetBlock(System.Int32,System.Int32,System.Int32,fCraft.Block)">
            <summary> Sets a block in a safe way.
            Note that using SetBlock does not relay changes to players.
            Use QueueUpdate() for changing blocks on live maps/worlds. </summary>
            <param name="x"> X coordinate (width). </param>
            <param name="y"> Y coordinate (length, Notch's Z). </param>
            <param name="z"> Z coordinate (height, Notch's Y). </param>
            <param name="type"> Block type to set. </param>
        </member>
        <member name="M:fCraft.Map.SetBlock(fCraft.Vector3I,fCraft.Block)">
            <summary> Sets a block at given coordinates. Checks bounds. </summary>
            <param name="coords"> Coordinate vector (X,Y,Z). </param>
            <param name="type"> Block type to set. </param>
        </member>
        <member name="M:fCraft.Map.GetBlock(System.Int32,System.Int32,System.Int32)">
            <summary> Gets a block at given coordinates. Checks bounds. </summary>
            <param name="x"> X coordinate (width). </param>
            <param name="y"> Y coordinate (length, Notch's Z). </param>
            <param name="z"> Z coordinate (height, Notch's Y). </param>
            <returns> Block type, as a Block enumeration. Undefined if coordinates were out of bounds. </returns>
        </member>
        <member name="M:fCraft.Map.GetBlock(fCraft.Vector3I)">
            <summary> Gets a block at given coordinates. Checks bounds. </summary>
            <param name="coords"> Coordinate vector (X,Y,Z). </param>
            <returns> Block type, as a Block enumeration. Undefined if coordinates were out of bounds. </returns>
        </member>
        <member name="M:fCraft.Map.InBounds(System.Int32,System.Int32,System.Int32)">
            <summary> Checks whether the given coordinate (in block units) is within the bounds of the map. </summary>
            <param name="x"> X coordinate (width). </param>
            <param name="y"> Y coordinate (length, Notch's Z). </param>
            <param name="z"> Z coordinate (height, Notch's Y). </param>
        </member>
        <member name="M:fCraft.Map.InBounds(fCraft.Vector3I)">
            <summary> Checks whether the given coordinate (in block units) is within the bounds of the map. </summary>
            <param name="vec"> Coordinate vector (X,Y,Z). </param>
        </member>
        <member name="M:fCraft.Map.QueueUpdate(fCraft.BlockUpdate)">
            <summary> Queues a new block update to be processed.
            Due to concurrent nature of the server, there is no guarantee
            that updates will be applied in any specific order. </summary>
        </member>
        <member name="M:fCraft.Map.ClearUpdateQueue">
            <summary> Clears all pending updates. </summary>
        </member>
        <member name="M:fCraft.Map.IsValidDimension(System.Int32)">
            <summary> Checks if a given map dimension (width, height, or length) is acceptible.
            Values between 1 and 2047 are technically allowed. </summary>
        </member>
        <member name="M:fCraft.Map.IsRecommendedDimension(System.Int32)">
            <summary> Checks if a given map dimension (width, height, or length) is among the set of recommended values
            Recommended values are: 16, 32, 64, 128, 256, 512, 1024 </summary>
        </member>
        <member name="M:fCraft.Map.ConvertBlockTypes(System.Byte[])">
            <summary> Converts nonstandard (50-255) blocks using the given mapping. </summary>
            <param name="mapping"> Byte array of length 256. </param>
            <returns> True if any blocks needed conversion/mapping. </returns>
        </member>
        <member name="M:fCraft.Map.RemoveUnknownBlocktypes">
            <summary> Replaces all nonstandard (50-255) blocks with air. </summary>
            <returns> True if any blocks needed replacement. </returns>
        </member>
        <member name="M:fCraft.Map.GetBlockByName(System.String)">
            <summary> Tries to find a blocktype by name. </summary>
            <param name="blockName"> Name of the block. </param>
            <returns> Described Block, or Block.Undefined if name could not be recognized. </returns>
        </member>
        <member name="M:fCraft.Map.GetEdgeTexture(fCraft.Block)">
            <summary> Tries to find WoM file hashes for edge textures. </summary>
            <param name="block"> Blocktype to find edge texture hash for. </param>
            <returns> Hash string if found, or null if not found. </returns>
        </member>
        <member name="M:fCraft.Map.GetCompressedCopy(System.IO.Stream,System.Boolean)">
            <summary> Writes a copy of the current map to a given stream, compressed with GZipStream. </summary>
            <param name="stream"> Stream to write the compressed data to. </param>
            <param name="prependBlockCount"> If true, prepends block data with signed, 32bit, big-endian block count. </param>
        </member>
        <member name="M:fCraft.Map.MakeFloodBarrier">
            <summary> Makes an admincrete barrier, 1 block thick, around the lower half of the map. </summary>
        </member>
        <member name="P:fCraft.Map.World">
            <summary> The world associated with this map, if any. May be null. </summary>
        </member>
        <member name="P:fCraft.Map.HasChangedSinceSave">
            <summary> Whether the map was modified since last time it was saved. </summary>
        </member>
        <member name="P:fCraft.Map.HasChangedSinceBackup">
            <summary> Whether the map was saved since last time it was backed up. </summary>
        </member>
        <member name="P:fCraft.Map.Metadata">
            <summary> Map metadata, excluding zones. </summary>
        </member>
        <member name="P:fCraft.Map.Zones">
            <summary> All zones within a map. </summary>
        </member>
        <member name="P:fCraft.Map.UpdateQueueLength">
            <summary> Number of blocks that are waiting to be processed. </summary>
        </member>
        <member name="T:fCraft.ConfigSection">
            <summary> ConfigKey section/category. </summary>
        </member>
        <member name="F:fCraft.ConfigSection.General">
            <summary> General server configuration (name, port, default rank, etc). </summary>
        </member>
        <member name="F:fCraft.ConfigSection.Chat">
            <summary> Chat-related configuration (colors, whether to announce certain events, etc). </summary>
        </member>
        <member name="F:fCraft.ConfigSection.Worlds">
            <summary> World-related configuration (main world, default build rank, map folder, etc). </summary>
        </member>
        <member name="F:fCraft.ConfigSection.Security">
            <summary> Security-related configuration (name verification, connection limit per IP, anti-spam, etc). </summary>
        </member>
        <member name="F:fCraft.ConfigSection.SavingAndBackup">
            <summary> Saving- and backup-related configuration (save interval, backup intervals, etc). </summary>
        </member>
        <member name="F:fCraft.ConfigSection.Logging">
            <summary> Logging-related configuration (what events to log, how to store log files, etc). </summary>
        </member>
        <member name="F:fCraft.ConfigSection.IRC">
            <summary> IRC-related configuration (network, channel list, bot nick, etc). </summary>
        </member>
        <member name="F:fCraft.ConfigSection.Advanced">
            <summary> Advanced configuration (performance adjustments, protocol tweaks, experimental features, etc). </summary>
        </member>
        <member name="T:fCraft.Server">
            <summary> Core of an fCraft server. Manages startup/shutdown, online player
            sessions, and global events and scheduled tasks. </summary>
        </member>
        <member name="M:fCraft.Server.GetArg(fCraft.ArgKey)">
            <summary> Returns value of a given command-line argument (if present). Use HasArg to check flag arguments. </summary>
            <param name="key"> Command-line argument name (enumerated) </param>
            <returns> Value of the command-line argument, or null if this argument was not set or argument is a flag. </returns>
        </member>
        <member name="M:fCraft.Server.HasArg(fCraft.ArgKey)">
            <summary> Checks whether a command-line argument was set. </summary>
            <param name="key"> Command-line argument name (enumerated) </param>
            <returns> True if given argument was given. Otherwise false. </returns>
        </member>
        <member name="M:fCraft.Server.GetArgString">
            <summary> Produces a string containing all recognized arguments that wereset/passed to this instance of fCraft. </summary>
            <returns> A string containing all given arguments, or an empty string if none were set. </returns>
        </member>
        <member name="M:fCraft.Server.GetArgList">
            <summary> Produces a list of arguments that were passed to this instance of fCraft. </summary>
            <returns> An array of strings, formatted as --key="value" (or, for flag arguments, --key).
            Returns an empty string array if no arguments were set. </returns>
        </member>
        <member name="M:fCraft.Server.InitLibrary(System.Collections.Generic.IEnumerable{System.String})">
            <summary> Reads command-line switches and sets up paths and logging.
            This should be called before any other library function.
            Note to frontend devs: Subscribe to log-related events before calling this.
            Does not raise any events besides Logger.Logged.
            Throws exceptions on failure. </summary>
            <param name="rawArgs"> string arguments passed to the frontend (if any). </param>
            <exception cref="T:System.InvalidOperationException"> If library is already initialized. </exception>
            <exception cref="T:System.IO.IOException"> Working path, log path, or map path could not be set. </exception>
        </member>
        <member name="M:fCraft.Server.InitServer">
            <summary> Initialized various server subsystems. This should be called after InitLibrary and before StartServer.
            Loads config, PlayerDB, IP bans, AutoRank settings, builds a list of commands, and prepares the IRC bot.
            Raises Server.Initializing and Server.Initialized events, and possibly Logger.Logged events.
            Throws exceptions on failure. </summary>
            <exception cref="T:System.InvalidOperationException"> Library is not initialized, or server is already initialzied. </exception>
        </member>
        <member name="M:fCraft.Server.StartServer">
            <summary> Starts the server:
            Creates Console pseudoplayer, loads the world list, starts listening for incoming connections,
            sets up scheduled tasks and starts the scheduler, starts the heartbeat, and connects to IRC.
            Raises Server.Starting and Server.Started events.
            May throw an exception on hard failure. </summary>
            <returns> True if server started normally, false on soft failure. </returns>
            <exception cref="T:System.InvalidOperationException"> Server is already running, or server/library have not been initailized. </exception>
        </member>
        <member name="M:fCraft.Server.Shutdown(fCraft.ShutdownParams,System.Boolean)">
            <summary> Initiates the server shutdown with given parameters. </summary>
            <param name="shutdownParams"> Shutdown parameters </param>
            <param name="waitForShutdown"> If true, blocks the calling thread until shutdown is complete or cancelled. </param>
        </member>
        <member name="M:fCraft.Server.CancelShutdown">
            <summary> Attempts to cancel the shutdown timer. </summary>
            <returns> True if a shutdown timer was cancelled, false if no shutdown is in progress.
            Also returns false if it's too late to cancel (shutdown has begun). </returns>
        </member>
        <member name="M:fCraft.Server.Message(System.String)">
            <summary> Broadcasts a message to all online players.
            Shorthand for Server.Players.Message </summary>
        </member>
        <member name="M:fCraft.Server.Message(System.String,System.Object[])">
            <summary> Broadcasts a message to all online players.
            Shorthand for Server.Players.Message </summary>
        </member>
        <member name="M:fCraft.Server.Message(fCraft.Player,System.String)">
            <summary> Broadcasts a message to all online players except one.
            Shorthand for Server.Players.Except(except).Message </summary>
        </member>
        <member name="M:fCraft.Server.Message(fCraft.Player,System.String,System.Object[])">
            <summary> Broadcasts a message to all online players except one.
            Shorthand for Server.Players.Except(except).Message </summary>
        </member>
        <member name="M:fCraft.Server.CheckExternalIP">
            <summary> Checks server's external IP, as reported by checkip.dyndns.org. </summary>
        </member>
        <member name="M:fCraft.Server.FindPlayers(System.String,System.Boolean)">
            <summary> Finds a player by name, using autocompletion.
            Returns ALL matching players, including hidden ones. </summary>
            <returns> An array of matches. List length of 0 means "no matches";
            1 is an exact match; over 1 for multiple matches. </returns>
        </member>
        <member name="M:fCraft.Server.FindPlayers(fCraft.Player,System.String,System.Boolean)">
            <summary> Finds a player by name, using autocompletion. Does not include hidden players. </summary>
            <param name="player"> Player who initiated the search.
            Used to determine whether others are hidden or not. </param>
            <param name="name"> Full or partial name of the search target. </param>
            <param name="raiseEvent"> Whether to raise Server.SearchingForPlayer event. </param>
            <returns> An array of matches. List length of 0 means "no matches";
            1 is an exact match; over 1 for multiple matches. </returns>
        </member>
        <member name="M:fCraft.Server.FindPlayerOrPrintMatches(fCraft.Player,System.String,System.Boolean,System.Boolean)">
            <summary> Find player by name using autocompletion.
            Returns null and prints message if none or multiple players matched.
            Raises Player.SearchingForPlayer event, which may modify search results. </summary>
            <param name="player"> Player who initiated the search. This is where messages are sent. </param>
            <param name="name"> Full or partial name of the search target. </param>
            <param name="includeHidden"> Whether to include hidden players in the search. </param>
            <param name="raiseEvent"> Whether to raise Server.SearchingForPlayer event. </param>
            <returns> Player object, or null if no player was found. </returns>
        </member>
        <member name="M:fCraft.Server.CountPlayers(System.Boolean)">
            <summary> Counts online players, optionally including hidden ones. </summary>
        </member>
        <member name="M:fCraft.Server.CountVisiblePlayers(fCraft.Player)">
            <summary> Counts online players whom the given observer can see. </summary>
        </member>
        <member name="P:fCraft.Server.StartTime">
            <summary> Time when the server started (UTC). Used to check uptime. </summary>
        </member>
        <member name="E:fCraft.Server.Initializing">
            <summary> Occurs when the server is about to be initialized. </summary>
        </member>
        <member name="E:fCraft.Server.Initialized">
            <summary> Occurs when the server has been initialized. </summary>
        </member>
        <member name="E:fCraft.Server.Starting">
            <summary> Occurs when the server is about to start. </summary>
        </member>
        <member name="E:fCraft.Server.Started">
            <summary> Occurs when the server has just started. </summary>
        </member>
        <member name="E:fCraft.Server.ShutdownBegan">
            <summary> Occurs when the server is about to start shutting down. </summary>
        </member>
        <member name="E:fCraft.Server.ShutdownEnded">
            <summary> Occurs when the server finished shutting down. </summary>
        </member>
        <member name="E:fCraft.Server.PlayerListChanged">
            <summary> Occurs when the player list has just changed (any time players connected or disconnected). </summary>
        </member>
        <member name="E:fCraft.Server.SearchingForPlayer">
            <summary> Occurs when a player is searching for players (with autocompletion).
            The list of players in the search results may be replaced. </summary>
        </member>
        <member name="E:fCraft.Server.SessionConnecting">
            <summary> Occurs any time the server receives an incoming connection (cancellable). </summary>
        </member>
        <member name="E:fCraft.Server.SessionConnected">
            <summary> Occurs any time a new session has connected, but before any communication is done. </summary>
        </member>
        <member name="E:fCraft.Server.SessionDisconnected">
            <summary> Occurs when a connection is closed or lost. </summary>
        </member>
        <member name="T:fCraft.ShutdownParams">
            <summary> Describes the circumstances of server shutdown. </summary>
        </member>
        <member name="P:fCraft.ShutdownParams.Delay">
            <summary> Delay before shutting down. </summary>
        </member>
        <member name="P:fCraft.ShutdownParams.KillProcess">
            <summary> Whether 800Craft should try to forcefully kill the current process. </summary>
        </member>
        <member name="P:fCraft.ShutdownParams.Restart">
            <summary> Whether the server is expected to restart itself after shutting down. </summary>
        </member>
        <member name="P:fCraft.ShutdownParams.InitiatedBy">
            <summary> Player who initiated the shutdown. May be null or Console. </summary>
        </member>
        <member name="T:fCraft.ShutdownReason">
            <summary> Categorizes conditions that lead to server shutdowns. </summary>
        </member>
        <member name="F:fCraft.ShutdownReason.Other">
            <summary> Use for mod- or plugin-triggered shutdowns. </summary>
        </member>
        <member name="F:fCraft.ShutdownReason.FailedToInitialize">
            <summary> InitLibrary or InitServer failed. </summary>
        </member>
        <member name="F:fCraft.ShutdownReason.FailedToStart">
            <summary> StartServer failed. </summary>
        </member>
        <member name="F:fCraft.ShutdownReason.Restarting">
            <summary> Server is restarting, usually because someone called /Restart. </summary>
        </member>
        <member name="F:fCraft.ShutdownReason.Crashed">
            <summary> Server has experienced a non-recoverable crash. </summary>
        </member>
        <member name="F:fCraft.ShutdownReason.ShuttingDown">
            <summary> Server is shutting down, usually because someone called /Shutdown. </summary>
        </member>
        <member name="F:fCraft.ShutdownReason.ProcessClosing">
            <summary> Server process is being closed/killed. </summary>
        </member>
        <member name="M:fCraft.WorldManager.SaveWorldList">
            <summary> Saves the current world list to worlds.xml. Thread-safe. </summary>
        </member>
        <member name="M:fCraft.WorldManager.FindWorldExact(System.String)">
            <summary> Finds a world by full name.
            Target world is not guaranteed to have a loaded map. </summary>
            <returns> World if found, or null if not found. </returns>
        </member>
        <member name="M:fCraft.WorldManager.FindWorldsNoEvent(System.String)">
            <summary> Finds all worlds that match the given world name.
            Autocompletes. Does not raise SearchingForWorld event.
            Target worlds are not guaranteed to have a loaded map. </summary>
        </member>
        <member name="M:fCraft.WorldManager.FindWorlds(fCraft.Player,System.String)">
            <summary> Finds all worlds that match the given name.
            Autocompletes. Raises SearchingForWorld event.
            Target worlds are not guaranteed to have a loaded map.</summary>
            <param name="player"> Player who is calling the query. May be null. </param>
            <param name="name"> Full or partial world name. </param>
            <returns> An array of 0 or more worlds that matched the name. </returns>
        </member>
        <member name="M:fCraft.WorldManager.FindWorldOrPrintMatches(fCraft.Player,System.String)">
            <summary> Tries to find a single world by full or partial name.
            Returns null if zero or multiple worlds matched. </summary>
            <param name="player"> Player who will receive messages regarding zero or multiple matches. </param>
            <param name="worldName"> Full or partial world name. </param>
        </member>
        <member name="M:fCraft.WorldManager.RenameWorld(fCraft.World,System.String,System.Boolean,System.Boolean)">
            <summary> Changes the name of the given world. </summary>
        </member>
        <member name="P:fCraft.WorldManager.MainWorld">
            <summary> Gets or sets the default main world.
            That's the world that players first join upon connecting.
            The map of the new main world is preloaded, and old one is unloaded, if needed. </summary>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:fCraft.WorldOpException"/>
        </member>
        <member name="E:fCraft.WorldManager.MainWorldChanging">
            <summary> Occurs when the main world is being changed (cancellable). </summary>
        </member>
        <member name="E:fCraft.WorldManager.MainWorldChanged">
            <summary> Occurs after the main world has been changed. </summary>
        </member>
        <member name="E:fCraft.WorldManager.SearchingForWorld">
            <summary> Occurs when a player is searching for worlds (with autocompletion).
            The list of worlds in the search results may be replaced. </summary>
        </member>
        <member name="E:fCraft.WorldManager.WorldCreating">
            <summary> Occurs before a new world is created/added (cancellable). </summary>
        </member>
        <member name="E:fCraft.WorldManager.WorldCreated">
            <summary> Occurs after a new world is created/added. </summary>
        </member>
        <member name="T:fCraft.ArgKey">
            <summary> Enumerates the recognized command-line switches/arguments.
            Args are parsed in Server.InitLibrary </summary>
        </member>
        <member name="F:fCraft.ArgKey.Path">
            <summary> Working path (directory) that fCraft should use.
            If the path is relative, it's computed against the location of fCraft.dll </summary>
        </member>
        <member name="F:fCraft.ArgKey.LogPath">
            <summary> Path (directory) where the log files should be placed.
            If the path is relative, it's computed against the working path. </summary>
        </member>
        <member name="F:fCraft.ArgKey.MapPath">
            <summary> Path (directory) where the map files should be loaded from/saved to.
            If the path is relative, it's computed against the working path. </summary>
        </member>
        <member name="F:fCraft.ArgKey.Config">
            <summary> Path (file) of the configuration file.
            If the path is relative, it's computed against the working path. </summary>
        </member>
        <member name="F:fCraft.ArgKey.NoRestart">
            <summary> If NoRestart flag is present, fCraft will shutdown instead of restarting.
            Useful if you are using an auto-restart script/process monitor of some sort. </summary>
        </member>
        <member name="F:fCraft.ArgKey.ExitOnCrash">
            <summary> If ExitOnCrash flag is present, fCraft frontends will exit
            at once in the event of an unrecoverable crash, instead of showing a message. </summary>
        </member>
        <member name="F:fCraft.ArgKey.NoLog">
            <summary> Disables all logging. </summary>
        </member>
        <member name="F:fCraft.ArgKey.NoConsoleColor">
            <summary> Disables colors in CLI frontends. </summary>
        </member>
        <member name="T:fCraft.Forester">
            <summary> Vegetation generator for MapGenerator. </summary>
        </member>
        <member name="M:fCraft.PacketWriter.Write(System.Int16)">
            <summary>  Writes a 16-bit short integer in Big-Endian order. </summary>
        </member>
        <member name="M:fCraft.PacketWriter.Write(System.Int32)">
            <summary>  Writes a 32-bit integer in Big-Endian order. </summary>
        </member>
        <member name="M:fCraft.PacketWriter.Write(System.String)">
            <summary> Writes a string in Minecraft protocol format.
            Maximum length: 64 characters. </summary>
        </member>
        <member name="T:fCraft.MinBinaryHeap`2">
            <summary>
            Min binary heap implementation.
            Note that the base array size is never decreased, i.e. Clear just moves the internal pointer to the first element.
            </summary>
        </member>
        <member name="M:fCraft.MinBinaryHeap`2.Add(`0)">
            <summary>
            Adds an element.
            </summary>
            <param name="t">The t.</param>
        </member>
        <member name="M:fCraft.MinBinaryHeap`2.Head">
            <summary>
            Head of this heap. This call assumes that size was checked before accessing the head element.
            </summary>
            <returns>Head element.</returns>
        </member>
        <member name="M:fCraft.MinBinaryHeap`2.RemoveHead">
            <summary>
            Removes the head. This call assumes that size was checked before removing the head element.
            </summary>
        </member>
        <member name="P:fCraft.MinBinaryHeap`2.Size">
            <summary>
            Heap size.
            </summary>
        </member>
        <member name="T:fCraft.PerlinNoise3D">
            <summary> Implementation of 3D Perlin Noise after Ken Perlin's reference implementation. </summary>
        </member>
        <member name="T:fCraft.Block">
            <summary> Enumeration of all standard Minecraft Classic block types. </summary>
        </member>
        <member name="M:fCraft.RankManager.Reset">
            <summary> Clears the list of ranks. </summary>
        </member>
        <member name="M:fCraft.RankManager.AddRank(fCraft.Rank)">
            <summary> Adds a new rank to the list. Checks for duplicates. </summary>
        </member>
        <member name="M:fCraft.RankManager.FindRank(System.String)">
            <summary> Parses rank name (without the ID) using autocompletion. </summary>
            <param name="name"> Full or partial rank name. </param>
            <returns> If name could be parsed, returns the corresponding Rank object. Otherwise returns null. </returns>
        </member>
        <member name="M:fCraft.RankManager.FindRank(System.Int32)">
            <summary> Finds rank by index. Rank at index 0 is the highest. </summary>
            <returns> If name could be parsed, returns the corresponding Rank object. Otherwise returns null. </returns>
        </member>
        <member name="M:fCraft.RankManager.GetMinRankWithAllPermissions(fCraft.Permission[])">
            <summary> Finds the lowest rank that has all the required permissions. </summary>
            <param name="permissions"> One or more permissions to check for. </param>
            <returns> A relevant Rank object, or null of none were found. </returns>
        </member>
        <member name="M:fCraft.RankManager.GetMinRankWithAnyPermission(fCraft.Permission[])">
            <summary> Finds the lowest rank that has all the required permissions. </summary>
            <param name="permissions"> One or more permissions to check for. </param>
            <returns> A relevant Rank object, or null of none were found. </returns>
        </member>
        <member name="T:fCraft.LeaveReason">
            <summary> List of possible reasons for players leaving the server. </summary>
        </member>
        <member name="F:fCraft.LeaveReason.Unknown">
            <summary> Unknown leave reason (default) </summary>
        </member>
        <member name="F:fCraft.LeaveReason.ClientQuit">
            <summary> Client exited normally </summary>
        </member>
        <member name="F:fCraft.LeaveReason.ClientReconnect">
            <summary> Client reconnected before old session timed out, or connected from another IP. </summary>
        </member>
        <member name="F:fCraft.LeaveReason.Kick">
            <summary> Manual or miscellaneous kick </summary>
        </member>
        <member name="F:fCraft.LeaveReason.IdleKick">
            <summary> Kicked for being idle/AFK. </summary>
        </member>
        <member name="F:fCraft.LeaveReason.InvalidMessageKick">
            <summary> Invalid characters in a message </summary>
        </member>
        <member name="F:fCraft.LeaveReason.InvalidSetTileKick">
            <summary> Attempted to place invalid blocktype </summary>
        </member>
        <member name="F:fCraft.LeaveReason.InvalidOpcodeKick">
            <summary> Unknown opcode or packet </summary>
        </member>
        <member name="F:fCraft.LeaveReason.BlockSpamKick">
            <summary> Triggered antigrief / block spam </summary>
        </member>
        <member name="F:fCraft.LeaveReason.MessageSpamKick">
            <summary> Kicked for message spam (after warnings) </summary>
        </member>
        <member name="F:fCraft.LeaveReason.Ban">
            <summary> Banned directly by name </summary>
        </member>
        <member name="F:fCraft.LeaveReason.BanIP">
            <summary> Banned indirectly by /BanIP </summary>
        </member>
        <member name="F:fCraft.LeaveReason.BanAll">
            <summary> Banned indirectly by /BanAll </summary>
        </member>
        <member name="F:fCraft.LeaveReason.ServerError">
            <summary> Server-side error (uncaught exception in session's thread) </summary>
        </member>
        <member name="F:fCraft.LeaveReason.ServerShutdown">
            <summary> Server is shutting down </summary>
        </member>
        <member name="F:fCraft.LeaveReason.ServerFull">
            <summary> Server was full or became full </summary>
        </member>
        <member name="F:fCraft.LeaveReason.WorldFull">
            <summary> World was full (forced join failed) </summary>
        </member>
        <member name="F:fCraft.LeaveReason.ProtocolViolation">
            <summary> Login failed due to protocol violation/mismatch (e.g. SMP client) </summary>
        </member>
        <member name="F:fCraft.LeaveReason.UnverifiedName">
            <summary> Login failed due to unverified player name </summary>
        </member>
        <member name="F:fCraft.LeaveReason.LoginFailed">
            <summary> Login denied for some other reason </summary>
        </member>
        <member name="F:fCraft.LeaveReason.RageQuit">
            <summary> When a player ragequits from the server </summary>
        </member>
        <member name="T:fCraft.NameVerificationMode">
            <summary> Mode of player name verification. </summary>
        </member>
        <member name="F:fCraft.NameVerificationMode.Never">
            <summary> Player names are not checked.
            Any connecting player can assume any identity. </summary>
        </member>
        <member name="F:fCraft.NameVerificationMode.Balanced">
            <summary> Security balanced with usability.
            If normal verification fails, an additional check is done:
            If player has previously verified for his current IP and has connected at least twice before, he is allowed in. </summary>
        </member>
        <member name="F:fCraft.NameVerificationMode.Always">
            <summary> Strict verification checks.
            If name cannot be verified, player is kicked and a failed login attempt is logged.
            Note that players connecting from localhost (127.0.0.1) are always allowed. </summary>
        </member>
        <member name="T:fCraft.RankChangeType">
            <summary> Describes the way player's rank was set. </summary>
        </member>
        <member name="F:fCraft.RankChangeType.Default">
            <summary> Default rank (never been promoted or demoted). </summary>
        </member>
        <member name="F:fCraft.RankChangeType.Promoted">
            <summary> Promoted manually by another player or by console. </summary>
        </member>
        <member name="F:fCraft.RankChangeType.Demoted">
            <summary> Demoted manually by another player or by console. </summary>
        </member>
        <member name="F:fCraft.RankChangeType.AutoPromoted">
            <summary> Promoted automatically (e.g. by AutoRank). </summary>
        </member>
        <member name="F:fCraft.RankChangeType.AutoDemoted">
            <summary> Demoted automatically (e.g. by AutoRank). </summary>
        </member>
        <member name="T:fCraft.BandwidthUseMode">
            <summary> Bandwidth use mode.
            This setting affects the way player receive movement updates. </summary>
        </member>
        <member name="F:fCraft.BandwidthUseMode.Default">
            <summary> Use server default. </summary>
        </member>
        <member name="F:fCraft.BandwidthUseMode.VeryLow">
            <summary> Very low bandwidth (choppy player movement, players pop-in/pop-out in the distance). </summary>
        </member>
        <member name="F:fCraft.BandwidthUseMode.Low">
            <summary> Lower bandwidth use (less choppy, pop-in distance is further). </summary>
        </member>
        <member name="F:fCraft.BandwidthUseMode.Normal">
            <summary> Normal mode (pretty much no choppiness, pop-in only noticeable when teleporting). </summary>
        </member>
        <member name="F:fCraft.BandwidthUseMode.High">
            <summary> High bandwidth use (pretty much no choppiness, pop-in only noticeable when teleporting on large maps). </summary>
        </member>
        <member name="F:fCraft.BandwidthUseMode.VeryHigh">
            <summary> Very high bandwidth use (no choppiness at all, no pop-in). </summary>
        </member>
        <member name="T:fCraft.CanPlaceResult">
            <summary> A list of possible results of Player.CanPlace() permission test. </summary>
        </member>
        <member name="F:fCraft.CanPlaceResult.Allowed">
            <summary> Block may be placed/changed. </summary>
        </member>
        <member name="F:fCraft.CanPlaceResult.OutOfBounds">
            <summary> Block was out of bounds in the given map. </summary>
        </member>
        <member name="F:fCraft.CanPlaceResult.BlocktypeDenied">
            <summary> Player was not allowed to place or replace blocks of this particular blocktype. </summary>
        </member>
        <member name="F:fCraft.CanPlaceResult.WorldDenied">
            <summary> Player was not allowed to build on this particular world. </summary>
        </member>
        <member name="F:fCraft.CanPlaceResult.ZoneDenied">
            <summary> Player was not allowed to build in this particular zone.
            Use World.Map.FindDeniedZone() to find the specific zone. </summary>
        </member>
        <member name="F:fCraft.CanPlaceResult.RankDenied">
            <summary> Player's rank is not allowed to build or delete in general. </summary>
        </member>
        <member name="F:fCraft.CanPlaceResult.PluginDenied">
            <summary> A plugin callback cancelled block placement/deletion.
            To keep player's copy of the map in sync, he will be resent the old blocktype at that location. </summary>
        </member>
        <member name="F:fCraft.CanPlaceResult.PluginDeniedNoUpdate">
            <summary> A plugin callback cancelled block placement/deletion.
            A copy of the old block will not be sent to the player (he may go out of sync). </summary>
        </member>
        <member name="F:fCraft.WorldChangeReason.FirstWorld">
            <summary> First world that the player joins upon entering the server (main). </summary>
        </member>
        <member name="F:fCraft.WorldChangeReason.Rejoin">
            <summary> Rejoining the same world (e.g. after /wflush or /wload). </summary>
        </member>
        <member name="F:fCraft.WorldChangeReason.ManualJoin">
            <summary> Manually by typing /join. </summary>
        </member>
        <member name="F:fCraft.WorldChangeReason.Tp">
            <summary> Teleporting to a player on another map. </summary>
        </member>
        <member name="F:fCraft.WorldChangeReason.Bring">
            <summary> Bring brought by a player on another map. Also used by /bringall, /wbring, and /setspawn. </summary>
        </member>
        <member name="F:fCraft.WorldChangeReason.SpectateTargetJoined">
            <summary> Following the /spectate target to another world. </summary>
        </member>
        <member name="F:fCraft.WorldChangeReason.WorldRemoved">
            <summary> Previous world was removed with /wunload. </summary>
        </member>
        <member name="F:fCraft.WorldChangeReason.PermissionChanged">
            <summary> Previous world's access permissions changed, and player was forced to main. </summary>
        </member>
        <member name="F:fCraft.WorldChangeReason.Portal">
            <summary> Player entered a portal. </summary>
        </member>
        <member name="F:fCraft.BanStatus.NotBanned">
            <summary> Player is not banned. </summary>
        </member>
        <member name="F:fCraft.BanStatus.IPBanExempt">
            <summary> Player cannot be banned or IP-banned. </summary>
        </member>
        <member name="F:fCraft.BanStatus.Banned">
            <summary> Player is banned. </summary>
        </member>
        <member name="F:fCraft.ClickAction.Delete">
            <summary> Deleting a block (left-click in Minecraft). </summary>
        </member>
        <member name="F:fCraft.ClickAction.Build">
            <summary> Building a block (right-click in Minecraft). </summary>
        </member>
        <member name="F:fCraft.SessionState.Offline">
            <summary> There is no session associated with this player (e.g. Console). </summary>
        </member>
        <member name="F:fCraft.SessionState.Connecting">
            <summary> Player is in the middle of the login sequence. </summary>
        </member>
        <member name="F:fCraft.SessionState.LoadingMain">
            <summary> Player has logged in, and is loading the first world. </summary>
        </member>
        <member name="F:fCraft.SessionState.Online">
            <summary> Player is fully connected and online. </summary>
        </member>
        <member name="F:fCraft.SessionState.PendingDisconnect">
            <summary> Player was kicked, and is about to be disconnected. </summary>
        </member>
        <member name="F:fCraft.SessionState.Disconnected">
            <summary> Session has ended - player disconnected. </summary>
        </member>
        <member name="T:fCraft.ZoneCommands">
            <summary> Contains commands related to zone management. </summary>
        </member>
        <member name="T:fCraft.ModerationCommands">
            <summary>
            Most commands for server moderation - kick, ban, rank change, etc - are here.
            </summary>
        </member>
        <member name="T:fCraft.IWorldEvent">
            <summary> An EventArgs for an event that directly relates to a particular world. </summary>
        </member>
        <member name="T:fCraft.MonoCompat">
            <summary> Class dedicated to solving Mono compatibility issues </summary>
        </member>
        <member name="M:fCraft.MonoCompat.StartDotNetProcess(System.String,System.String,System.Boolean)">
            <summary> Starts a .NET process, using Mono if necessary. </summary>
            <param name="assemblyLocation"> .NET executable path. </param>
            <param name="assemblyArgs"> Arguments to pass to the executable. </param>
            <param name="detachIfMono"> If true, new process will be detached under Mono. </param>
            <returns>Process object</returns>
        </member>
        <member name="M:fCraft.MonoCompat.PrependMono(System.String)">
            <summary>Prepends the correct Mono name to the .NET executable, if needed.</summary>
            <param name="dotNetExecutable"></param>
            <returns></returns>
        </member>
        <member name="P:fCraft.MonoCompat.IsCaseSensitive">
            <summary> Whether the current filesystem is case-sensitive. </summary>
        </member>
        <member name="P:fCraft.MonoCompat.IsMono">
            <summary> Whether we are currently running under Mono. </summary>
        </member>
        <member name="P:fCraft.MonoCompat.IsSGenCapable">
            <summary> Whether Mono's generational GC is available. </summary>
        </member>
        <member name="P:fCraft.MonoCompat.MonoVersionString">
            <summary> Full Mono version string. May be null if we are running a REALLY old version. </summary>
        </member>
        <member name="P:fCraft.MonoCompat.MonoVersion">
            <summary> Mono version number. May be null if we are running a REALLY old version. </summary>
        </member>
        <member name="P:fCraft.MonoCompat.IsWindows">
            <summary> Whether we are under a Windows OS (under either .NET or Mono). </summary>
        </member>
        <member name="M:fCraft.BlockDB.CountNewerEntries(System.TimeSpan)">
            <summary> Counts entries that are newer tha the given age. </summary>
            <param name="age"> Maximum age of entry </param>
            <returns> Number of entries newer than given age. May be 0 if all entries are older than given age. </returns>
        </member>
        <member name="M:fCraft.BlockDB.Clear">
            <summary> Clears cache and deletes the BlockDB file. </summary>
        </member>
        <member name="P:fCraft.BlockDB.IsEnabled">
            <summary> Checks whether this BlockDB is enabled (either automatically or manually).
            Set EnabledState to enable/disable. </summary>
        </member>
        <member name="P:fCraft.BlockDB.FileName">
            <summary> Full path to the file where BlockDB data is stored. </summary>
        </member>
        <member name="P:fCraft.BlockDB.IsEnabledGlobally">
            <summary> Whether BlockDB was enabled at startup.
            Changing this setting currently requires a server restart. </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:fCraft.CommandCategory" -->
        <member name="F:fCraft.CommandCategory.None">
            <summary> Default command category. Do not use it. </summary>
        </member>
        <member name="F:fCraft.CommandCategory.Building">
            <summary> Building-related commands: drawing, binding, copy/paste. </summary>
        </member>
        <member name="F:fCraft.CommandCategory.Chat">
            <summary> Chat-related commands: messaging, ignoring, muting, etc. </summary>
        </member>
        <member name="F:fCraft.CommandCategory.Info">
            <summary> Information commands: server, world, zone, rank, and player infos. </summary>
        </member>
        <member name="F:fCraft.CommandCategory.Moderation">
            <summary> Moderation commands: kick, ban, rank, tp/bring, etc. </summary>
        </member>
        <member name="F:fCraft.CommandCategory.Maintenance">
            <summary> Server maintenance commands: reloading configs, editing PlayerDB, importing data, etc. </summary>
        </member>
        <member name="F:fCraft.CommandCategory.World">
            <summary> World-related commands: joining, loading, renaming, etc. </summary>
        </member>
        <member name="F:fCraft.CommandCategory.Zone">
            <summary> Zone-related commands: creating, editing, testing, etc. </summary>
        </member>
        <member name="F:fCraft.CommandCategory.Debug">
            <summary> Commands that are only used for diagnostics and debugging. </summary>
        </member>
        <member name="F:fCraft.CommandCategory.Fun">
            <summary> Commands that are just fun. </summary>
        </member>
        <member name="F:fCraft.CommandCategory.Math">
            <summary> Commands that use advanced mathematics. </summary>
        </member>
        <member name="T:fCraft.ConfigKey">
            <summary> Enumeration of available configuration keys. See comments
            at the top of Config.cs for a history of changes. </summary>
        </member>
        <member name="M:fCraft.IPBanList.Add(fCraft.IPBanInfo,System.Boolean)">
            <summary> Adds a new IP Ban. </summary>
            <param name="ban"> Ban information </param>
            <param name="raiseEvent"> Whether AddingIPBan and AddedIPBan events should be raised. </param>
            <returns> True if ban was added, false if it was already on the list </returns>
        </member>
        <member name="M:fCraft.IPBanList.Get(System.Net.IPAddress)">
            <summary> Retrieves ban information for a given IP address. </summary>
            <param name="address"> IP address to check. </param>
            <returns> IPBanInfo object if found, otherwise null. </returns>
        </member>
        <member name="M:fCraft.IPBanList.Contains(System.Net.IPAddress)">
            <summary> Checks whether the given address is banned. </summary>
            <param name="address"> Address to look for. </param>
        </member>
        <member name="M:fCraft.IPBanList.Remove(System.Net.IPAddress,System.Boolean)">
            <summary> Removes a given IP address from the ban list (if present). </summary>
            <param name="address"> Address to unban. </param>
            <param name="raiseEvents"> Whether to raise RemovingIPBan and RemovedIPBan events. </param>
            <returns> True if IP was unbanned.
            False if it was not banned in the first place, or if it was cancelled by an event. </returns>
        </member>
        <member name="M:fCraft.IPBanList.BanIP(System.Net.IPAddress,fCraft.Player,System.String,System.Boolean,System.Boolean)">
            <summary> Bans given IP address. All players from IP are kicked. If an associated PlayerInfo is known,
            use a different overload of this method instead. Throws PlayerOpException on problems. </summary>
            <param name="targetAddress"> IP address that is being banned. </param>
            <param name="player"> Player who is banning. </param>
            <param name="reason"> Reason for ban. May be empty, if permitted by server configuration. </param>
            <param name="announce"> Whether ban should be publicly announced on the server. </param>
            <param name="raiseEvents"> Whether AddingIPBan and AddedIPBan events should be raised. </param>
        </member>
        <member name="M:fCraft.IPBanList.UnbanIP(System.Net.IPAddress,fCraft.Player,System.String,System.Boolean,System.Boolean)">
            <summary> Unbans an IP address. If an associated PlayerInfo is known,
            use a different overload of this method instead. Throws PlayerOpException on problems. </summary>
            <param name="targetAddress"> IP address that is being unbanned. </param>
            <param name="player"> Player who is unbanning. </param>
            <param name="reason"> Reason for unban. May be empty, if permitted by server configuration. </param>
            <param name="announce"> Whether unban should be publicly announced on the server. </param>
            <param name="raiseEvents"> Whether RemovingIPBan and RemovedIPBan events should be raised. </param>
        </member>
        <member name="M:fCraft.IPBanList.BanAll(System.Net.IPAddress,fCraft.Player,System.String,System.Boolean,System.Boolean)">
            <summary> Bans given IP address and all accounts on that IP. All players from IP are kicked.
            Throws PlayerOpException on problems. </summary>
            <param name="targetAddress"> IP address that is being banned. </param>
            <param name="player"> Player who is banning. </param>
            <param name="reason"> Reason for ban. May be empty, if permitted by server configuration. </param>
            <param name="announce"> Whether ban should be publicly announced on the server. </param>
            <param name="raiseEvents"> Whether AddingIPBan, AddedIPBan, BanChanging, and BanChanged events should be raised. </param>
        </member>
        <member name="M:fCraft.IPBanList.UnbanAll(System.Net.IPAddress,fCraft.Player,System.String,System.Boolean,System.Boolean)">
            <summary> Unbans given IP address and all accounts on that IP. Throws PlayerOpException on problems. </summary>
            <param name="targetAddress"> IP address that is being unbanned. </param>
            <param name="player"> Player who is unbanning. </param>
            <param name="reason"> Reason for unban. May be null or empty, if permitted by server configuration. </param>
            <param name="announce"> Whether unban should be publicly announced on the server. </param>
            <param name="raiseEvents"> Whether RemovingIPBan, RemovedIPBan, BanChanging, and BanChanged events should be raised. </param>
        </member>
        <member name="E:fCraft.IPBanList.AddingIPBan">
            <summary> Occurs when a new IP ban is about to be added (cancellable). </summary>
        </member>
        <member name="E:fCraft.IPBanList.AddedIPBan">
            <summary> Occurs when a new IP ban has been added. </summary>
        </member>
        <member name="E:fCraft.IPBanList.RemovingIPBan">
            <summary> Occurs when an existing IP ban is about to be removed (cancellable). </summary>
        </member>
        <member name="E:fCraft.IPBanList.RemovedIPBan">
            <summary> Occurs after an existing IP ban has been removed. </summary>
        </member>
        <member name="T:fCraft.Scheduler">
            <summary> A general-purpose task scheduler. </summary>
        </member>
        <member name="M:fCraft.Scheduler.AddTask(fCraft.SchedulerTask)">
            <summary> Schedules a given task for execution. </summary>
            <param name="task"> Task to schedule. </param>
        </member>
        <member name="M:fCraft.Scheduler.NewTask(fCraft.SchedulerCallback)">
            <summary> Creates a new SchedulerTask object to run in the main thread.
            Use this if your task is time-sensitive or frequent, and your callback won't take too long to execute. </summary>
            <param name="callback"> Method to call when the task is triggered. </param>
            <returns> Newly created SchedulerTask object. </returns>
        </member>
        <member name="M:fCraft.Scheduler.NewBackgroundTask(fCraft.SchedulerCallback)">
            <summary> Creates a new SchedulerTask object to run in the background thread.
            Use this if your task is not very time-sensitive or frequent, or if your callback is resource-intensive. </summary>
            <param name="callback"> Method to call when the task is triggered. </param>
            <returns> Newly created SchedulerTask object. </returns>
        </member>
        <member name="M:fCraft.Scheduler.NewTask(fCraft.SchedulerCallback,System.Object)">
            <summary> Creates a new SchedulerTask object to run in the main thread.
            Use this if your task is time-sensitive or frequent, and your callback won't take too long to execute. </summary>
            <param name="callback"> Method to call when the task is triggered. </param>
            <param name="userState"> Parameter to pass to the method. </param>
            <returns> Newly created SchedulerTask object. </returns>
        </member>
        <member name="M:fCraft.Scheduler.NewBackgroundTask(fCraft.SchedulerCallback,System.Object)">
            <summary> Creates a new SchedulerTask object to run in the background thread.
            Use this if your task is not very time-sensitive or frequent, or if your callback is resource-intensive. </summary>
            <param name="callback"> Method to call when the task is triggered. </param>
            <param name="userState"> Parameter to pass to the method. </param>
            <returns> Newly created SchedulerTask object. </returns>
        </member>
        <member name="F:fCraft.Rank.AllowSecurityCircumvention">
            <summary> Whether players of this rank are allowed to remove restrictions that affect themselves.
            Affects /WMain, /WAccess, /WBuild, /ZAdd, /ZEdit, and /ZRemove. </summary>
        </member>
        <member name="F:fCraft.Rank.Index">
            <summary> Rank's relative index on the hierarchy. Index of the top rank is always 0.
            Subordinate ranks start at 1. Higher index = lower rank. </summary>
        </member>
        <member name="M:fCraft.Rank.Parse(System.String)">
            <summary> Parses serialized rank. Accepts either the "name" or "name#ID" format.
            Uses legacy rank mapping table for unrecognized ranks. Does not autocomple.
            Name part is case-insensitive. ID part is case-sensitive. </summary>
            <param name="name"> Full rank name, or name and ID. </param>
            <returns> If name could be parsed, returns the corresponding Rank object. Otherwise returns null. </returns>
        </member>
        <member name="P:fCraft.Rank.Color">
            <summary> Rank color code. Should not be left blank. </summary>
        </member>
        <member name="P:fCraft.Rank.Name">
            <summary> Rank's displayed name.
            Use rank.FullName instead for serializing (to improve backwards compatibility). </summary>
        </member>
        <member name="P:fCraft.Rank.ID">
            <summary> Unique rank ID. Generated by Rank.GenerateID. Assigned once at creation.
            Used to preserve compatibility in case a rank gets renamed. </summary>
        </member>
        <member name="P:fCraft.Rank.Permissions">
            <summary> Set of permissions given to this rank. Use Rank.Can() to access. </summary>
        </member>
        <member name="P:fCraft.Rank.FullName">
            <summary> Fully qualified name of the rank. Format: "Name#ID".
            Should be used whereever rank name needs to be serialized. </summary>
        </member>
        <member name="P:fCraft.Rank.ClassyName">
            <summary> Decorated name of the rank, including color and prefix
            (if enabled by the configuration). </summary>
        </member>
        <member name="P:fCraft.Rank.Players">
            <summary> Shortcut to the list of all online players of this rank. </summary>
        </member>
        <member name="P:fCraft.Rank.PlayerCount">
            <summary> Total number of players of this rank (online and offline). </summary>
        </member>
        <member name="T:fCraft.BlockChangeContext">
            <summary> Context of the block change. Multiple flags can be combined. </summary>
        </member>
        <member name="F:fCraft.BlockChangeContext.Unknown">
            <summary> Default/unknown context. </summary>
        </member>
        <member name="F:fCraft.BlockChangeContext.Manual">
            <summary> Block was manually edited, with a click. Opposite of Drawn. </summary>
        </member>
        <member name="F:fCraft.BlockChangeContext.Drawn">
            <summary> Block was edited using a drawing operation. Opposite of Manual. </summary>
        </member>
        <member name="F:fCraft.BlockChangeContext.Replaced">
            <summary> Block was replaced (using /paint, /r, /rn, /rb, or replace brush variations). </summary>
        </member>
        <member name="F:fCraft.BlockChangeContext.Pasted">
            <summary> Block was pasted (using /paste, /pastenot, /px, or /pnx) </summary>
        </member>
        <member name="F:fCraft.BlockChangeContext.Cut">
            <summary> Block was cut (using /cut). </summary>
        </member>
        <member name="F:fCraft.BlockChangeContext.UndoneSelf">
            <summary> Undone a change previously made by same player (using /undo, /ua, or /up on self). </summary>
        </member>
        <member name="F:fCraft.BlockChangeContext.UndoneOther">
            <summary> Undone a change previously made by another player (using /ua or /up). </summary>
        </member>
        <member name="F:fCraft.BlockChangeContext.Restored">
            <summary> Block was inserted from another file (using /restore). </summary>
        </member>
        <member name="F:fCraft.BlockChangeContext.Filled">
            <summary> Block was filled (using /fill2d or /fill3d). </summary>
        </member>
        <member name="F:fCraft.BlockChangeContext.Portal">
            <summary> Portals </summary>
        </member>
        <member name="T:fCraft.MapConversion.MapFormat">
            <summary> An enumeration of map formats supported by fCraft. </summary>
        </member>
        <member name="F:fCraft.MapConversion.MapFormat.Unknown">
            <summary> Unidentified map. </summary>
        </member>
        <member name="F:fCraft.MapConversion.MapFormat.FCMv3">
            <summary> Current map format used by fCraft. </summary>
        </member>
        <member name="F:fCraft.MapConversion.MapFormat.FCMv2">
            <summary> Current map format used by fCraft. </summary>
        </member>
        <member name="F:fCraft.MapConversion.MapFormat.MCSharp">
            <summary> Map format used by MCSharp and its forks (MCZall/MCLawl). Initial support added by Tyler/TkTech. </summary>
        </member>
        <member name="F:fCraft.MapConversion.MapFormat.MinerCPP">
            <summary> Map format used by MinerCPP and LuaCraft. Initial support added by Tyler/TkTech. </summary>
        </member>
        <member name="F:fCraft.MapConversion.MapFormat.Myne">
            <summary> Map format used by Myne and its derivatives (MyneCraft/iCraft). </summary>
        </member>
        <member name="F:fCraft.MapConversion.MapFormat.Creative">
            <summary> Map format used by Mojang's classic and survivaltest. </summary>
        </member>
        <member name="F:fCraft.MapConversion.MapFormat.NBT">
            <summary> Map format used by Mojang's indev. </summary>
        </member>
        <member name="F:fCraft.MapConversion.MapFormat.JTE">
            <summary> Map format used by JTE's server. </summary>
        </member>
        <member name="F:fCraft.MapConversion.MapFormat.D3">
            <summary> Map foramt used by D3 server. </summary>
        </member>
        <member name="F:fCraft.MapConversion.MapFormat.Opticraft">
            <summary> Format used by Opticraft v0.2+. Support contributed by Jared/LgZ-optical. </summary>
        </member>
        <member name="F:fCraft.MapConversion.MapFormat.FCMv4">
            <summary> Universal map format, planned for future use by fCraft. Currently unsupported. </summary>
        </member>
        <member name="T:fCraft.MapConversion.MapStorageType">
            <summary> Type of map storage (file or folder-based). </summary>
        </member>
        <member name="M:LibNbt.Queries.TagQuery.Count">
            <summary>
            The total number of tokens in the query.
            </summary>
            <returns>The number of tokens</returns>
        </member>
        <member name="M:LibNbt.Queries.TagQuery.TokensLeft">
            <summary>
            The number of tokens left in the query after the current one.
            </summary>
            <returns>The number of tokens</returns>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/> class.
            </summary>
            <param name="required"><c>true</c> if a element should be localized; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.Equals(System.Object)">
            <summary>
            Returns whether the value of the given object is equal to the current <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/>.
            </summary>
            <param name="obj">The object to test the value equality of. </param>
            <returns>
            <c>true</c> if the value of the given object is equal to that of the current; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:JetBrains.Annotations.LocalizationRequiredAttribute.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A hash code for the current <see cref="T:JetBrains.Annotations.LocalizationRequiredAttribute"/>.</returns>
        </member>
        <member name="P:JetBrains.Annotations.LocalizationRequiredAttribute.Required">
            <summary>
            Gets a value indicating whether a element should be localized.
            <value><c>true</c> if a element should be localized; otherwise, <c>false</c>.</value>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that marked method builds string by format pattern and (optional) arguments. 
            Parameter, which contains format string, should be given in constructor.
            The format string should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> -like form
            </summary>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes new instance of StringFormatMethodAttribute
            </summary>
            <param name="formatParameterName">Specifies which parameter of an annotated method should be treated as format-string</param>
        </member>
        <member name="P:JetBrains.Annotations.StringFormatMethodAttribute.FormatParameterName">
            <summary>
            Gets format parameter name
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one  of the parameters of the caller function.
            For example, <see cref="T:System.ArgumentNullException"/> has such parameter.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if one of the conditions is satisfied. 
            To set the condition, mark one of the parameters with <see cref="T:JetBrains.Annotations.AssertionConditionAttribute"/> attribute
            </summary>
            <seealso cref="T:JetBrains.Annotations.AssertionConditionAttribute"/>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. 
            The method itself should be marked by <see cref="T:JetBrains.Annotations.AssertionMethodAttribute"/> attribute.
            The mandatory argument of the attribute is the assertion type.
            </summary>
            <seealso cref="T:JetBrains.Annotations.AssertionConditionType"/>
        </member>
        <member name="M:JetBrains.Annotations.AssertionConditionAttribute.#ctor(JetBrains.Annotations.AssertionConditionType)">
            <summary>
            Initializes new instance of AssertionConditionAttribute
            </summary>
            <param name="conditionType">Specifies condition type</param>
        </member>
        <member name="P:JetBrains.Annotations.AssertionConditionAttribute.ConditionType">
            <summary>
            Gets condition type
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisifes the condition, then the execution continues. 
            Otherwise, execution is assumed to be halted
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_TRUE">
            <summary>
            Indicates that the marked parameter should be evaluated to true
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_FALSE">
            <summary>
            Indicates that the marked parameter should be evaluated to false
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NULL">
            <summary>
            Indicates that the marked parameter should be evaluated to null value
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>
            Indicates that the marked parameter should be evaluated to not null value
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of marked element could be <c>null</c> sometimes, so the check for <c>null</c> is necessary before its usage
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of marked element could never be <c>null</c>
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of marked type (or its derivatives) cannot be compared using '==' or '!=' operators.
            There is only exception to compare with <c>null</c>, it is permitted
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to target attribute, specifies a requirement for any type which is marked with 
            target attribute to implement or inherit specific type or types
            </summary>
            <example>
            <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute 
            {}
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent
            {}
            </code>
            </example>
        </member>
        <member name="M:JetBrains.Annotations.BaseTypeRequiredAttribute.#ctor(System.Type[])">
            <summary>
            Initializes new instance of BaseTypeRequiredAttribute
            </summary>
            <param name="baseTypes">Specifies which types are required</param>
        </member>
        <member name="P:JetBrains.Annotations.BaseTypeRequiredAttribute.BaseTypes">
            <summary>
            Gets enumerations of specified base types
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.UsedImplicitlyAttribute.TargetFlags">
            <summary>
            Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.MeansImplicitUseAttribute.TargetFlags">
            <summary>
            Gets value indicating what is meant to be used
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>
            Only entity marked with attribute considered used
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>
            Indicates implicit assignment to a member
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Instantiated">
            <summary>
            Indicates implicit instantiation of a type
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>
            Members of entity marked with attribute are considered used
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>
            Entity marked with attribute and all its members considered used
            </summary>
        </member>
        <member name="T:fCraft.MetadataEntry`1">
            <summary> A string metadata entry. </summary>
            <typeparam name="TValue"> Value type. Must be a reference type. </typeparam>
        </member>
        <member name="T:fCraft.MetadataCollection`1">
            <summary> A collection of metadata entries, addressable by pairs of string group/key names.
            Group names, key names, and values may not be null. </summary>
            <typeparam name="TValue"> Value type. Must be a reference type. </typeparam>
        </member>
        <member name="M:fCraft.MetadataCollection`1.#ctor">
            <summary> Creates an empty MetadataCollection. </summary>
        </member>
        <member name="M:fCraft.MetadataCollection`1.#ctor(fCraft.MetadataCollection{`0})">
            <summary> Creates a copy of the given MetadataCollection. Copies all entries within. </summary>
        </member>
        <member name="M:fCraft.MetadataCollection`1.Add(System.String,System.String,`0)">
            <summary> Adds a new entry to the collection.
            Throws ArgumentException if an entry with the same group/key already exists. </summary>
            <param name="group"> Group name. Cannot be null. </param>
            <param name="key"> Key name. Cannot be null. </param>
            <param name="value"> Value. Cannot be null. </param>
        </member>
        <member name="M:fCraft.MetadataCollection`1.Remove(System.String,System.String)">
            <summary> Removes entry with the specified group/key from the collection. </summary>
            <param name="group"> Group name. Cannot be null. </param>
            <param name="key"> Key name. Cannot be null. </param>
            <returns> True if the entry was located and removed. False if no entry was found. </returns>
        </member>
        <member name="M:fCraft.MetadataCollection`1.GetKeyCount(System.String)">
            <summary> Number of keys within a given group. Throws KeyNotFoundException if no such group exists. </summary>
            <param name="group"> Group name. Cannot be null. </param>
            <returns> Number of keys within the specified group. </returns>
        </member>
        <member name="M:fCraft.MetadataCollection`1.GetGroup(System.String)">
            <summary> Enumerates a group of keys. </summary>
            <remarks> Lock SyncRoot if this is used in a loop. </remarks>
        </member>
        <member name="M:fCraft.MetadataCollection`1.GetEnumerator">
            <summary> Enumerates all keys in this collection. </summary>
            <remarks> Lock SyncRoot if this is used in a loop. </remarks>
        </member>
        <member name="P:fCraft.MetadataCollection`1.Count">
            <summary> The total number of entries in this collection. </summary>
        </member>
        <member name="P:fCraft.MetadataCollection`1.GroupCount">
            <summary> Number of groups in this collection. </summary>
        </member>
        <member name="P:fCraft.MetadataCollection`1.Item(System.String,System.String)">
            <summary> Gets or sets the value of a given entry.
            If the specified key/value pair is not found, a get operation throws a KeyNotFoundException,
            and a set operation creates a new element with the specified group/key. </summary>
            <param name="group"> The group of the value to get or set. </param>
            <param name="key"> The key of the value to get or set. </param>
        </member>
        <member name="P:fCraft.MetadataCollection`1.SyncRoot">
            <summary> Internal lock object used by this collection to ensure thread safety. </summary>
        </member>
        <member name="T:fCraft.Vector3I">
            <summary> Integer 3D vector. </summary>
        </member>
        <member name="M:fCraft.Vector3I.op_Division(fCraft.Vector3I,System.Int32)">
            <summary> Integer division! </summary>
        </member>
        <member name="T:fCraft.IPBanInfo">
            <summary> IP ban record. </summary>
        </member>
        <member name="F:fCraft.IPBanInfo.BanDate">
            <summary> Date/time (UTC) when the ban was issued. </summary>
        </member>
        <member name="F:fCraft.IPBanInfo.Attempts">
            <summary> Login attempts from this IP. </summary>
        </member>
        <member name="F:fCraft.IPBanInfo.LastAttemptDate">
            <summary> Date/time (UTC) of the most recent login attempt. </summary>
        </member>
        <member name="P:fCraft.IPBanInfo.Address">
            <summary> Banned IP address. </summary>
        </member>
        <member name="P:fCraft.IPBanInfo.BannedBy">
            <summary> Name of the player or entity who banned this player. </summary>
        </member>
        <member name="P:fCraft.IPBanInfo.BanReason">
            <summary> Reason/memo for the ban. May be null. </summary>
        </member>
        <member name="P:fCraft.IPBanInfo.PlayerName">
            <summary> Name of the player associted with this IP (if given at the time of banning). May be null. </summary>
        </member>
        <member name="P:fCraft.IPBanInfo.LastAttemptName">
            <summary> Name of the player who attempted to log in from this banned IP most recently. </summary>
        </member>
        <member name="T:fCraft.MapConversion.INIFile">
            <summary> INI parser used by MapMyne. </summary>
        </member>
        <member name="T:fCraft.MapConversion.NBTType">
            <summary> Standard NBT data types. </summary>
        </member>
        <member name="T:fCraft.CommandManager">
            <summary> Static class that allows registration and parsing of all text commands. </summary>
        </member>
        <member name="M:fCraft.CommandManager.GetCommands">
            <summary> Gets a list of all commands (includding hidden ones). </summary>
        </member>
        <member name="M:fCraft.CommandManager.GetCommands(System.Boolean)">
            <summary> Gets a list of ONLY hidden or non-hidden commands, not both. </summary>
        </member>
        <member name="M:fCraft.CommandManager.GetCommands(fCraft.Rank,System.Boolean)">
            <summary> Gets a list of commands available to a specified rank. </summary>
        </member>
        <member name="M:fCraft.CommandManager.GetCommands(fCraft.CommandCategory,System.Boolean)">
            <summary> Gets a list of commands in a specified category.
            Note that commands may belong to more than one category. </summary>
        </member>
        <member name="M:fCraft.CommandManager.RegisterCustomCommand(fCraft.CommandDescriptor)">
            <summary> Registers a custom command with fCraft.
            CommandRegistrationException may be thrown if the given descriptor does not meet all the requirements. </summary>
        </member>
        <member name="M:fCraft.CommandManager.GetDescriptor(System.String,System.Boolean)">
            <summary> Finds an instance of CommandDescriptor for a given command.
            Case-insensitive, but no autocompletion. </summary>
            <param name="commandName"> Command to find. </param>
            <param name="alsoCheckAliases"> Whether to check command aliases. </param>
            <returns> CommandDesriptor object if found, null if not found. </returns>
        </member>
        <member name="M:fCraft.CommandManager.ParseCommand(fCraft.Player,fCraft.Command,System.Boolean)">
            <summary> Parses and calls a specified command. </summary>
            <param name="player"> Player who issued the command. </param>
            <param name="cmd"> Command to be parsed and executed. </param>
            <param name="fromConsole"> Whether this command is being called from a non-player (e.g. Console). </param>
            <returns> True if the command was called, false if something prevented it from being called. </returns>
        </member>
        <member name="M:fCraft.CommandManager.IsValidCommandName(System.String)">
            <summary> Checks whether a command name is acceptible.
            Constraints are similar to Player.IsValidName, except for minimum length. </summary>
            <param name="name"> Command name to check. </param>
            <returns> True if the name is valid. </returns>
        </member>
        <member name="E:fCraft.CommandManager.CommandRegistering">
            <summary> Occurs when a command is being registered (cancellable). </summary>
        </member>
        <member name="E:fCraft.CommandManager.CommandRegistered">
            <summary> Occurs when a command has been registered. </summary>
        </member>
        <member name="E:fCraft.CommandManager.CommandCalling">
            <summary> Occurs when a command is being called by a player or the console (cancellable). </summary>
        </member>
        <member name="E:fCraft.CommandManager.CommandCalled">
            <summary> Occurs when the command has been called by a player or the console. </summary>
        </member>
        <member name="T:fCraft.SecurityController">
            <summary> Controller for setting and checking per-rank permissions and per-player exceptions.
            Used by World.AccessSecurity, World.BuildSecurity, and Zone. </summary>
        </member>
        <member name="M:fCraft.SecurityController.#ctor">
            <summary> Creates a new controller with no restrictions. </summary>
        </member>
        <member name="M:fCraft.SecurityController.Include(fCraft.PlayerInfo)">
            <summary> Either specially includes a player (if their state
            was previously neutral), or removes a specific exclusion. </summary>
            <param name="info"> Player's info. </param>
            <returns> Previous exception state of the player. </returns>
        </member>
        <member name="M:fCraft.SecurityController.Exclude(fCraft.PlayerInfo)">
            <summary> Either specially excludes a player (if their state
            was previously neutral), or removes a specific inclusion. </summary>
            <param name="info"> Player's info. </param>
            <returns> Previous exception state of the player. </returns>
        </member>
        <member name="M:fCraft.SecurityController.Check(fCraft.PlayerInfo)">
            <summary> Checks whether a player is allowed by this controller. </summary>
            <param name="info"> Player to check. </param>
            <returns> True if player is allowed. </returns>
        </member>
        <member name="M:fCraft.SecurityController.CheckDetailed(fCraft.PlayerInfo)">
            <summary> Checks player's permission status with this controller, in detail. </summary>
            <param name="info"> Player to check. </param>
            <returns> Security check result. </returns>
        </member>
        <member name="M:fCraft.SecurityController.GetDescription(fCraft.IClassy,System.String,System.String)">
            <summary> Creates a description string of the controller. </summary>
            <param name="target"> Name of the object that owns this controller. </param>
            <param name="noun"> The type of target (e.g. "world" or "zone"). </param>
            <param name="verb"> The action, in past tense, that this
            controller manages (e.g. "accessed" or "modified"). </param>
        </member>
        <member name="M:fCraft.SecurityController.ResetIncludedList">
            <summary> Clears the list of specifically included players. </summary>
        </member>
        <member name="M:fCraft.SecurityController.ResetExcludedList">
            <summary> Clears the list of specifically excluded players. </summary>
        </member>
        <member name="M:fCraft.SecurityController.Reset">
            <summary> Resets all permissions: minimum rank,
            excluded player list, and included player list. </summary>
        </member>
        <member name="M:fCraft.SecurityController.#ctor(fCraft.SecurityController)">
            <summary> Creates a copy of an existing controller. </summary>
        </member>
        <member name="M:fCraft.SecurityController.Clone">
            <summary> Creates a copy of an existing controller. </summary>
        </member>
        <member name="P:fCraft.SecurityController.MinRank">
            <summary> Lowest allowed player rank. </summary>
        </member>
        <member name="P:fCraft.SecurityController.HasRankRestriction">
            <summary> True if a rank restriction is in effect.
            This property is used to distinguish cases of no MinRank set
            vs. cases of MinRank set to LowestRank. </summary>
        </member>
        <member name="P:fCraft.SecurityController.HasRestrictions">
            <summary> True if this controller has any restrictions
            (per-rank or per-player). </summary>
        </member>
        <member name="T:fCraft.PlayerExceptions">
            <summary> List of included and excluded players. </summary>
        </member>
        <member name="T:fCraft.PermissionOverride">
            <summary> Indicates what kind of per-entity override/exception is defined in a security controller. </summary>
        </member>
        <member name="F:fCraft.PermissionOverride.None">
            <summary> No permission exception. </summary>
        </member>
        <member name="F:fCraft.PermissionOverride.Allow">
            <summary> Entity is explicitly allowed / whitelisted. </summary>
        </member>
        <member name="F:fCraft.PermissionOverride.Deny">
            <summary> Entity is explicitly denied / blacklisted. </summary>
        </member>
        <member name="T:fCraft.SecurityCheckResult">
            <summary> Possible results of a SecurityController permission check. </summary>
        </member>
        <member name="F:fCraft.SecurityCheckResult.Allowed">
            <summary> Allowed, no permission involved. </summary>
        </member>
        <member name="F:fCraft.SecurityCheckResult.RankTooLow">
            <summary> Denied, rank too low. </summary>
        </member>
        <member name="F:fCraft.SecurityCheckResult.RankTooHigh">
            <summary> Denied, rank too high (not yet implemented). </summary>
        </member>
        <member name="F:fCraft.SecurityCheckResult.WhiteListed">
            <summary> Allowed, this entity was explicitly allowed / whitelisted. </summary>
        </member>
        <member name="F:fCraft.SecurityCheckResult.BlackListed">
            <summary> Denied, this entity was explicitly denied / blacklisted. </summary>
        </member>
    </members>
</doc>
